import{c as w,e as y,p as I,f as V,i as H,k as v,m as T,o,u as g,n as q,v as n,w as f,x as U}from"./index-IeegpAPg.js";import"./colorUtils-D0_txqzP.js";import"./utils-DyJ7tXUW.js";import"./enums-CmIX1y88.js";import"./floatRGBA-CWXyMtGj.js";import"./UpdateTracking2D-gAJU1rbE.js";import"./GeometryUtils-B6ZhES5h.js";import"./defaults-Ca7Ezrxv.js";import"./OverrideHelper-Beyhf6nl.js";import"./Container-C2qpHSCx.js";import"./WGLContainer-CL3kB6Gn.js";import"./Program-vCUOXcd1.js";import"./LabelMetric-CjQSsSXf.js";import"./StyleDefinition-BTt_i6C1.js";import"./enums-BRzLM11V.js";import"./GridShader-nsQodRpm.js";import"./pbf-DkH7zH7h.js";import"./FeatureCommandQueue-CcrO3amX.js";import"./PieChartMeshWriter-BdAY2b1O.js";import"./renderState-G6XOSrbk.js";import"./interfaces-DDtDqZYj.js";import"./testSVGPremultipliedAlpha-BdwbaLSA.js";import{F as C}from"./GraphicsView2D-Cw44kt5e.js";import"./earcut-Lltz9D9k.js";import"./vec3f32-nZdmKIgz.js";import{r as b,o as m,n as d}from"./imageUtils-D0-fLLW0.js";import{j as Q,y as S}from"./LayerView-DUaSkTLa.js";import{h as $}from"./HighlightGraphicContainer-CaFaa8bk.js";import{i as F}from"./RefreshableLayerView-BxWjWyH0.js";import{_ as P,R as k}from"./MapServiceLayerViewHelper-CfSfkXw3.js";import{r as L}from"./drapedUtils-BBdrhDC3.js";import"./vec42-DVf6basU.js";import"./vec4f64-CMoMXWBi.js";import"./BidiEngine-DNnuvc1i.js";import"./OptimizedFeature-CIptWNVu.js";import"./Rect-CUzevAry.js";import"./BindType-BmZEZMMh.js";import"./Util-ByG6sjfF.js";import"./defaultsJSON-GKolV7NZ.js";import"./quantizationUtils-D5PvWHeA.js";import"./BufferObject-Bnu6dY3p.js";import"./VertexArrayObject-CJcekOdQ.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./ProgramTemplate-XgYhCHLK.js";import"./config-MDUrh2eL.js";import"./featureConversionUtils-6nDzGVaS.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./CircularArray-CujHzHWW.js";import"./AttributeStore-Dtd8nlCC.js";import"./TimeOnly-B5mfw6we.js";import"./UnknownTimeZone-Bp45PPyc.js";import"./timeSupport-CnzjLscW.js";import"./queryUtils-DnQsJh_n.js";import"./json-Wa8cmqdu.js";import"./labelUtils-cNe8bNWP.js";import"./FieldsIndex-1XykZMxf.js";import"./diffUtils-BsmLiWuX.js";import"./constants-F8oTIn7N.js";import"./TurboLine-D77Zoaf8.js";import"./basicInterfaces-CZwQPxTp.js";import"./normalizeUtilsSync-CIrM6ohr.js";import"./Bitmap-DxcHoJMu.js";import"./TileContainer-yPPHUNSb.js";import"./layerViewUtils-CjvtRAuv.js";import"./AGraphicContainer-hi3-yUUm.js";import"./TechniqueInstance-CgrhW6QY.js";import"./languageUtils-Ci6rbkh0.js";import"./ImmutableArray-BPVd6ESQ.js";import"./shared-BWKNLwAY.js";import"./number-qg6go5_f.js";import"./scaleUtils-2G4b0GtR.js";import"./floorFilterUtils-DKzVzLpH.js";import"./sublayerUtils-DaN0oCzI.js";import"./popupUtils-D69QEmmC.js";const E=[0,0];let a=class extends F(b(Q(S))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),this._highlightView?.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,i=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,i?.effectiveMinLOD,i?.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,r)=>this.fetchTile(e,r),scheduler:this.scheduler,priority:V.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new H({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),P(this,this.layer)){const e=this._highlightView=new C({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new $(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new k({createFetchPopupFeaturesQueryGeometry:(r,h)=>L(r,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,h)=>{e.graphicUpdateHandler({graphic:r,property:h})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._popupHighlightHelper?.destroy(),this._highlightView?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(t,i):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):v()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return T(this.layer.tileInfo?.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(E,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,i={}){const e=this.tilemapCache,{signal:r,resamplingLevel:h=0}=i;if(!e)try{return await this._fetchImage(t,r)}catch(s){if(!o(s)&&!this.resampling)return m(this._tileInfoView.tileInfo.size);if(h<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){const c=new g(u),_=await this.fetchTile(c,{...i,resamplingLevel:h+1});return d(this._tileInfoView,_,c,t)}}throw s}const p=new g(0,0,0,0);let l;try{if(await e.fetchAvailabilityUpsample(t.level,t.row,t.col,p,{signal:r}),!this.resampling&&p.level!==t.level)return m(this._tileInfoView.tileInfo.size);l=await this._fetchImage(p,r)}catch(s){if(o(s))throw s;return m(this._tileInfoView.tileInfo.size)}return this.resampling?d(this._tileInfoView,l,p,t):l}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(i){o(i)||q.getLogger(this).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};n([f()],a.prototype,"resampling",null),n([f()],a.prototype,"tilemapCache",null),a=n([U("esri.views.2d.layers.TileLayerView2D")],a);const ri=a;export{ri as default};
