import{fJ as B,fK as I,fL as J,P as b,fM as K,aa as N,C as X,E as Y,G as k,c3 as g,a_ as Q,fN as V,bi as z,ax as Z,ev as ee,B as w,as as te,ar as q,aq as R,A as U,y as M,v as x,w as $,x as ie}from"./index-IeegpAPg.js";import{l as W}from"./TelemetryDisplay-CXDJYkEl.js";import{u as re}from"./OverlayContainer-Cg7m9Gtt.js";import{e as se}from"./Container-C2qpHSCx.js";import{a as oe,j as ne,y as ae}from"./LayerView-DUaSkTLa.js";import{t as le}from"./GraphicContainer-C5nQ67Lp.js";import{F as he}from"./GraphicsView2D-Cw44kt5e.js";import"./vec3f32-nZdmKIgz.js";import"./WGLContainer-CL3kB6Gn.js";import"./LabelMetric-CjQSsSXf.js";import"./enums-CmIX1y88.js";import"./Program-vCUOXcd1.js";import"./BufferObject-Bnu6dY3p.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./VertexArrayObject-CJcekOdQ.js";import"./ProgramTemplate-XgYhCHLK.js";import"./StyleDefinition-BTt_i6C1.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./featureConversionUtils-6nDzGVaS.js";import"./OptimizedFeature-CIptWNVu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./FeatureCommandQueue-CcrO3amX.js";import"./UpdateTracking2D-gAJU1rbE.js";import"./BidiEngine-DNnuvc1i.js";import"./GeometryUtils-B6ZhES5h.js";import"./utils-DyJ7tXUW.js";import"./Rect-CUzevAry.js";import"./defaults-Ca7Ezrxv.js";import"./defaultsJSON-GKolV7NZ.js";import"./BindType-BmZEZMMh.js";import"./Util-ByG6sjfF.js";import"./vec42-DVf6basU.js";import"./vec4f64-CMoMXWBi.js";import"./constants-F8oTIn7N.js";import"./layerViewUtils-CjvtRAuv.js";import"./AGraphicContainer-hi3-yUUm.js";import"./TechniqueInstance-CgrhW6QY.js";import"./TileContainer-yPPHUNSb.js";import"./FieldsIndex-1XykZMxf.js";import"./UnknownTimeZone-Bp45PPyc.js";import"./OverrideHelper-Beyhf6nl.js";import"./colorUtils-D0_txqzP.js";import"./quantizationUtils-D5PvWHeA.js";import"./AttributeStore-Dtd8nlCC.js";import"./TimeOnly-B5mfw6we.js";import"./timeSupport-CnzjLscW.js";import"./queryUtils-DnQsJh_n.js";import"./json-Wa8cmqdu.js";import"./labelUtils-cNe8bNWP.js";import"./diffUtils-BsmLiWuX.js";import"./normalizeUtilsSync-CIrM6ohr.js";const C=2;class me extends se{constructor(e){super(),this.element=e,this._handles=new B,this.isWrapAround=!1,this.perspectiveTransform=I(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(J(()=>this.element,()=>{const t=this.element;this.ready(),t&&this._handles.add(K(t,"play",()=>this.requestRender()))},b))}getMesh(e){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=N(this.texture)}get textureSize(){if(!this.texture)return[1,1];const e=this.texture.descriptor;return[e.width,e.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(e){const t=this.element;if(t==null)return;const{context:s}=e,{videoWidth:a,videoHeight:r}=t;if(a!==0&&r!==0){if(this.texture)t.paused||this.texture.setData(t);else{const i=new X;i.wrapMode=Y.CLAMP_TO_EDGE,i.preMultiplyAlpha=!0,i.width=a,i.height=r,this.texture=new k(s,i,t)}t.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(e)}}_createTransforms(){return null}updateDrawCoords(e,t,s,a){const r=this.element,i=this._getFrameInfo();if(!r||!i)return;this._initializeData(e,i,s);const{controlPoints:l,horizon:m}=i,h=Math.sqrt(l.length),p=h,{x:o,y}=e,u=this._vertices,T=l[0],P=l[h-1],F=l[(p-1)*h],j=l[(p-1)*h+h-1],G=g(m?m[0].mapPoint:T.mapPoint,s),O=g(m?m[1].mapPoint:P.mapPoint,s),f=g(F.mapPoint,s),L=g(j.mapPoint,s);this.clipGeometry=m?new oe({geometry:Q.fromJSON({rings:[[[f.x,f.y],[L.x,L.y],[O.x,O.y],[G.x,G.y],[f.x,f.y]]],spatialReference:s})}):null;for(let c=0;c<l.length;c++){const E=l[c],{sourcePoint:S,mapPoint:A}=E;if(S==null||A==null)continue;const v=g(A,s);u[c*C+0]=v.x-o,u[c*C+1]=v.y-y}let D=t;if(a){const c=Math.min(G.x,O.x,f.x,L.x),E=Math.max(G.x,O.x,f.x,L.x),{worldWidth:S,xBounds:A}=a,[v,H]=A;c<v&&E>v?D=S:E>H&&c<H&&(D=-S)}this.wrapAroundShift=D,this.isWrapAround=D!==0}draw(e,t){this.isReady&&this._vertices&&this._indices&&this._texCoords?t.render(e,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices}):this.requestRender()}_initializeData(e,t,s){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:a}=t,r=Math.sqrt(a.length),i=r,l=new Float32Array(C*a.length),m=new Uint16Array(2*a.length);for(let o=0;o<a.length;o++){const y=a[o],{sourcePoint:u,mapPoint:T}=y;if(u==null||T==null)continue;const P=g(T,s);l[o*C+0]=P.x-e.x,l[o*C+1]=P.y-e.y,m[2*o+0]=u.x,m[2*o+1]=u.y}const h=new Uint16Array(i*r+(i-2)*(r+2));let p=0;for(let o=0;o<i;o++){for(let y=0;y<r;y++)h[p++]=o*r+y,h[p++]=(o+1)*r+y;o<i-2&&(h[p++]=(o+1)*r+(r-1),h[p++]=(o+1)*r)}this._vertices=l,this._texCoords=m,this._indices=h}_getFrameInfo(){if(!this.groundControlPoints)return null;const e=this._getFrameControlPoints(),t=this.frameHorizonPoints;let s=null;if(t){const a=t.startX,r=t.startY,i=t.endX,l=t.endY;s=[{sourcePoint:V(a,r),mapPoint:new z(t.startLongitude,t.startLatitude)},{sourcePoint:V(i,l),mapPoint:new z(t.endLongitude,t.endLatitude)}]}return{controlPoints:e,horizon:s}}_getFrameControlPoints(){const e=this.groundControlPoints,t=e?.length;if(!t)return[];const s=new Array(t),a=Math.max(...e.map(({x:i})=>i)),r=this.element.videoWidth/a;for(let i=0;i<t;i++){const{x:l,y:m,lat:h,lon:p}=e[i];s[i]={sourcePoint:V(l*r,-m*r),mapPoint:new z(p,h)}}return s}}const _=new Z([255,127,0]);let d=class extends ne(ae){constructor(){super(...arguments),this._graphicsLayer=new ee,this._frameOutlineGraphic=new w({symbol:new te({outline:{type:"simple-line",color:_}})}),this._sensorTrailGraphic=new w({symbol:new q({color:_})}),this._lineOfSightGraphic=new w({symbol:new q({color:_})}),this._sensorLocationGraphic=new w({symbol:new R({color:_})}),this._frameCenterGraphic=new w({symbol:new R({color:_,style:"cross"})}),this._overlayContainer=null,this.layer=null,this.symbolColor=_,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=U(this._graphicsLayer)}initialize(){this.addHandles(M(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},b)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new W({frame:this.layer.telemetryDisplay?.frame??!1,frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this._overlayContainer=new re,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new he({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new le(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([M(()=>[this.layer.telemetryDisplay?.frame,this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight],()=>this._updateVisibleTelemetryElements(),b),M(()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight],()=>this._updateGraphicGeometries(),b)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=U(this.graphicsView)}supportsSpatialReference(n){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(n){this.graphicsView.processUpdate(n)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:n}=this.layer,{visibleTelemetryElements:e}=this;n&&e&&(e.frameOutline&&n.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,e.sensorTrail&&n.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,e.lineOfSight&&n.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,e.sensorLocation&&n.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,e.frameCenter&&n.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const n=new me(this.layer.videoElement);this.addAttachHandles([M(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{const{visibleTelemetryElements:e}=this;e?.frame?(n.frameHorizonPoints=this.layer.frameHorizonPoints,n.groundControlPoints=this.layer.groundControlPoints,n.opacity=1):n.opacity=0},b)]),this._overlayContainer.addChild(n),this.view.stage.requestRender()}};x([$()],d.prototype,"graphicsView",void 0),x([$()],d.prototype,"layer",void 0),x([$()],d.prototype,"symbolColor",void 0),x([$({type:W})],d.prototype,"visibleTelemetryElements",void 0),d=x([ie("esri.views.2d.layers.VideoLayerView2D")],d);const ht=d;export{ht as default};
