import{bd as p,s as m,az as s}from"./index-IeegpAPg.js";import{p as n}from"./MeshVertexAttributes-C0vaLkkM.js";import{B as a}from"./vertexSpaceConversion-CCO52rg6.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-BLVRTiuE.js";import"./computeTranslationToOriginAndRotation-B4Lmv4V4.js";import"./projectPointToVector-CtCQTVn5.js";import"./meshVertexSpaceUtils-hKPRZL_4.js";import"./MeshLocalVertexSpace-CQJobtM1.js";import"./vec3-B7akktlr.js";import"./BufferView-D5SM01Un.js";import"./vec42-DVf6basU.js";import"./vec4-D-2V8DwR.js";async function M(t,r,o){await Promise.resolve(),p(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{M as convertMeshVertexSpace};
