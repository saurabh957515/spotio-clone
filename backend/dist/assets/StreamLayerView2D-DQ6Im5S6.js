import{v as s,w as n,x as c,y as m,s as h,f2 as d,k as l}from"./index-IeegpAPg.js";import{d as u}from"./FeatureSet--t3TP_gY.js";import{n as y,r as _}from"./FeatureLayerView2D-CypG8KMD.js";import{d as g}from"./FeatureEffect-nunlOgL-.js";import"./Container-C2qpHSCx.js";import"./featureConversionUtils-6nDzGVaS.js";import"./OptimizedFeature-CIptWNVu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./timeSupport-D2DyNZmJ.js";import"./LayerView-DUaSkTLa.js";import"./layerViewUtils-CjvtRAuv.js";import"./TechniqueInstance-CgrhW6QY.js";import"./UpdateTracking2D-gAJU1rbE.js";import"./BidiEngine-DNnuvc1i.js";import"./GeometryUtils-B6ZhES5h.js";import"./enums-CmIX1y88.js";import"./utils-DyJ7tXUW.js";import"./Rect-CUzevAry.js";import"./LabelMetric-CjQSsSXf.js";import"./Program-vCUOXcd1.js";import"./BufferObject-Bnu6dY3p.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./defaults-Ca7Ezrxv.js";import"./defaultsJSON-GKolV7NZ.js";import"./BindType-BmZEZMMh.js";import"./Util-ByG6sjfF.js";import"./vec42-DVf6basU.js";import"./vec4f64-CMoMXWBi.js";import"./TileContainer-yPPHUNSb.js";import"./WGLContainer-CL3kB6Gn.js";import"./VertexArrayObject-CJcekOdQ.js";import"./ProgramTemplate-XgYhCHLK.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-BTt_i6C1.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./FeatureCommandQueue-CcrO3amX.js";import"./constants-F8oTIn7N.js";import"./CircularArray-CujHzHWW.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./OrderByInfo-C9JHxA_m.js";import"./labelingInfo-COg3pKpK.js";import"./labelUtils-cNe8bNWP.js";import"./jsonUtils-Y19K1K5D.js";import"./heatmapUtils-gC4I9bES.js";import"./SDFHelper-CCmbfpDj.js";import"./floatRGBA-CWXyMtGj.js";import"./HighlightCounter-Czi-fdpx.js";import"./floorFilterUtils-DKzVzLpH.js";import"./popupUtils-D69QEmmC.js";import"./RefreshableLayerView-BxWjWyH0.js";const f=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([n()],t.prototype,"_isUserPaused",void 0),s([n({readOnly:!0})],t.prototype,"connectionStatus",null),s([n({type:g})],t.prototype,"filter",void 0),t=s([c("esri.views.layers.StreamLayerView")],t),t};let o=class extends f(_){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new h("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return d(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return l(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new h("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return y(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(p=>{const a=u.fromJSON(p);return a.features.forEach(i=>{i.layer=this.layer,i.sourceLayer=this.layer}),a}),new u({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([n()],o.prototype,"pipelineConnectionStatus",void 0),s([n()],o.prototype,"pipelineErrorString",void 0),s([n({readOnly:!0})],o.prototype,"connectionError",null),s([n({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=s([c("esri.views.2d.layers.StreamLayerView2D")],o);const _e=o;export{_e as default};
