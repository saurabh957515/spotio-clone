import{cY as _,s as I,cZ as D,ag as Q,c_ as Z,ah as v,c$ as A,o as P,n as G,m as M,aQ as N,d0 as R}from"./index-IeegpAPg.js";import{o as z,r as U,e as B,n as H,t as J}from"./featureConversionUtils-6nDzGVaS.js";import{m as L}from"./FeatureStore-DmWJhoz6.js";import{x as E,j as b}from"./queryUtils-DnQsJh_n.js";import{V}from"./QueryEngine-B_4jw8oK.js";import{I as W,N as Y,E as K}from"./geojson-BHCFwKPd.js";import{l as X,a as ee,u as te}from"./clientSideDefaults-8WnztZUi.js";import{j as ie,p as T,d as w,f as F,y as $}from"./sourceUtils-DksodUJu.js";import{Z as O}from"./FieldsIndex-1XykZMxf.js";import"./OptimizedFeature-CIptWNVu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./BoundsStore-XOTfmvKy.js";import"./PooledRBush-DP3eGRuy.js";import"./timeSupport-CnzjLscW.js";import"./optimizedFeatureQueryEngineAdapter-Dms_VuRJ.js";import"./json-Wa8cmqdu.js";import"./LRUCache-B9Ch9jyy.js";import"./WhereClause-DbgZ3DzV.js";import"./TimeOnly-B5mfw6we.js";import"./UnknownTimeZone-Bp45PPyc.js";import"./QueryEngineCapabilities-DjYb9CEb.js";import"./quantizationUtils-D5PvWHeA.js";import"./utils-CbNSqnaG.js";import"./heatmapUtils-gC4I9bES.js";import"./vec42-DVf6basU.js";import"./vec4f64-CMoMXWBi.js";import"./utils-DK90Hjo4.js";import"./utils-DIsahhBE.js";import"./ClassBreaksDefinition-C6O4AXtE.js";import"./date-Dw3OHnFv.js";import"./capabilities-Y9lFlGVh.js";import"./defaultsJSON-GKolV7NZ.js";const se={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class ve{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const s=[],[i]=await Promise.all([e.url?this._fetch(t?.signal):null,this._checkProjection(e.spatialReference)]),r=W(i,{geometryType:e.geometryType}),l=e.fields||r.fields||[],d=e.hasZ!=null?e.hasZ:r.hasZ,p=r.geometryType;let m=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const h=e.spatialReference||_;let a=e.timeInfo;l===r.fields&&r.unknownFields.length>0&&s.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});const o=new O(l);let u=o.get(m);u?(u.type!=="esriFieldTypeString"&&(u.type="esriFieldTypeOID"),u.editable=!1,u.nullable=!1,m=u.name):(u={alias:m,name:m,type:r.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},l.unshift(u));const y={};for(const n of l){if(n.name==null&&(n.name=n.alias),n.alias==null&&(n.alias=n.name),!n.name)throw new I("geojson-layer:invalid-field-name","field name is missing",{field:n});if(!D.jsonValues.includes(n.type))throw new I("geojson-layer:invalid-field-type",`invalid type for field "${n.name}"`,{field:n});if(n.name!==u.name){const g=Q(n);g!==void 0&&(y[n.name]=g)}n.length==null&&(n.length=Z(n))}if(a){if(a.startTimeField){const n=o.get(a.startTimeField);n?(a.startTimeField=n.name,n.type="esriFieldTypeDate"):a.startTimeField=null}if(a.endTimeField){const n=o.get(a.endTimeField);n?(a.endTimeField=n.name,n.type="esriFieldTypeDate"):a.endTimeField=null}if(a.trackIdField){const n=o.get(a.trackIdField);n?a.trackIdField=n.name:(a.trackIdField=null,s.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:a}}))}a.startTimeField||a.endTimeField||(s.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:a}}),a=null)}const c=p?te(p):void 0,j=o.dateFields.length?{timeZoneIANA:v}:null,f={warnings:s,featureErrors:[],layerDefinition:{...se,drawingInfo:c??void 0,templates:X(y),extent:void 0,geometryType:p,objectIdField:m,fields:l,hasZ:!!d,timeInfo:a,dateFieldsTimeReference:j}};this._queryEngine=new V({fieldsIndex:O.fromLayerJSON({fields:l,timeInfo:a,dateFieldsTimeReference:j}),geometryType:p,hasM:!1,hasZ:d,objectIdField:m,spatialReference:h,timeInfo:a,featureStore:new L({geometryType:p,hasM:!1,hasZ:d})});const q=this._queryEngine.fieldsIndex.requiredFields.indexOf(u);q>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(q,1),this._createDefaultAttributes=ee(y,m);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const k=this._normalizeFeatures(x,f.featureErrors);this._queryEngine.featureStore.addMany(k);const{fullExtent:C,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(f.layerDefinition.extent=C,S){const{start:n,end:g}=S;f.layerDefinition.timeInfo.timeExtent=[n,g]}return f}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([ie(t,s),E(e.adds,t),E(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){this._loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=A(this._snapshotFeatures),this._snapshotTask.promise.then(i=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,i);const r=this._normalizeFeatures(i);r&&this._queryEngine.featureStore.addMany(r)},i=>{this._queryEngine.featureStore.clear(),P(i)||G.getLogger("esri.layers.GeoJSONLayer").error(new I("geojson-layer:refresh","An error occurred during refresh",{error:i}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:s}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:s}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:s,objectIdField:i}=this._queryEngine,r=Y(e,{geometryType:t,hasZ:s,objectIdField:i});if(!M(this._queryEngine.spatialReference,_))for(const l of r)l.geometry!=null&&(l.geometry=z(b(U(l.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),_,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this._loadOptions,i=(await N(t??"",{responseType:"json",query:{...s},signal:e})).data;return K(i),i}_normalizeFeatures(e,t){const{objectIdField:s,fieldsIndex:i}=this._queryEngine,r=[];for(const l of e){const d=this._createDefaultAttributes(),p=T(i,d,l.attributes,!0);p?t?.push(p):(this._assignObjectId(d,l.attributes,!0),l.attributes=d,l.objectId=d[s],r.push(l))}return r}async _applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t?.length&&this._applyAddEdits(r,t),s?.length&&this._applyUpdateEdits(r,s),i?.length){for(const p of i)r.deleteResults.push(w(p));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:l,timeExtent:d}=await this._queryEngine.fetchRecomputedExtents();return{extent:l,timeExtent:d,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:r,hasZ:l,objectIdField:d,spatialReference:p,featureStore:m,fieldsIndex:h}=this._queryEngine,a=[];for(const o of t){if(o.geometry&&i!==R(o.geometry)){s.push(F("Incorrect geometry type."));continue}const u=this._createDefaultAttributes(),y=T(h,u,o.attributes);if(y)s.push(y);else{if(this._assignObjectId(u,o.attributes),o.attributes=u,o.uid!=null){const c=o.attributes[d];e.uidToObjectId[o.uid]=c}if(o.geometry!=null){const c=o.geometry.spatialReference??p;o.geometry=b($(o.geometry,c),c,p)}a.push(o),s.push(w(o.attributes[d]))}}m.addMany(B([],a,i,l,r,d))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:r,objectIdField:l,spatialReference:d,featureStore:p,fieldsIndex:m}=this._queryEngine;for(const h of t){const{attributes:a,geometry:o}=h,u=a?.[l];if(u==null){e.push(F(`Identifier field ${l} missing`));continue}if(!p.has(u)){e.push(F(`Feature with object id ${u} missing`));continue}const y=H(p.getFeature(u),s,r,i);if(o!=null){if(s!==R(o)){e.push(F("Incorrect geometry type."));continue}const c=o.spatialReference??d;y.geometry=b($(o,c),c,d)}if(a){const c=T(m,y.attributes,a);if(c){e.push(c);continue}}p.add(J(y,s,r,i,l)),e.push(w(u))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if(s.type==="esriFieldTypeString")return()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(i=Math.max(i,r.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await E(_,e)}catch{throw new I("geojson-layer","Projection not supported")}}}export{ve as default};
