import{aX as h,B as y,bk as S,ak as l,n as g}from"./index-IeegpAPg.js";import{$ as E}from"./Mesh-fgNdPQeo.js";import{i as N,a as D}from"./External-B4ImJpQf.js";import{s as M}from"./infoFor3D-_5f2f6Um.js";import{d as F}from"./FeatureSet--t3TP_gY.js";import{n as T,i as w}from"./meshFeatureAttributes-CM9dGk6p.js";import"./MeshTransform-K-aqe5uA.js";import"./mat4f64-CSKppSlJ.js";import"./quat-DNoYUhoj.js";import"./mat3f64-q3fE-ZOt.js";import"./quatf64-aQ5IuZRd.js";import"./vec42-DVf6basU.js";import"./MeshVertexAttributes-C0vaLkkM.js";import"./MeshLocalVertexSpace-CQJobtM1.js";import"./meshVertexSpaceUtils-hKPRZL_4.js";import"./earcut-Lltz9D9k.js";import"./Indices-mr2dO71f.js";import"./plane-Br_kpZFb.js";import"./vec4f64-CMoMXWBi.js";import"./deduplicate-CP_tRvXl.js";import"./projectPointToVector-CtCQTVn5.js";import"./vertexSpaceConversion-CCO52rg6.js";import"./spatialReferenceEllipsoidUtils-BLVRTiuE.js";import"./computeTranslationToOriginAndRotation-B4Lmv4V4.js";import"./vec3-B7akktlr.js";import"./BufferView-D5SM01Un.js";import"./vec4-D-2V8DwR.js";const I=()=>g.getLogger("esri.rest.support.meshFeatureSet");function nt(t,o,e){const r=e.features;e.features=[],delete e.geometryType;const s=F.fromJSON(e);if(s.geometryType="mesh",!e.assetMaps)return s;const n=O(o,e.assetMaps),i=t.sourceSpatialReference??h.WGS84,p=e.globalIdFieldName,{outFields:a}=t,f=a!=null&&a.length>0?b(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const m=L(u,p,i,o,n);s.features.push(new y({geometry:m,attributes:f(u)}))}return s}function b(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const e in o)t.has(e)||delete o[e];return o}}function L(t,o,e,r,s){const n=t.attributes[o],i=s.get(n);if(i==null||!t.geometry)return null;const p=T(t.attributes,e,r.transformFieldRoles),a=S.fromJSON(t.geometry);a.spatialReference=e;const f=w(t.attributes,r.transformFieldRoles),u=e.isGeographic?"local":"georeferenced",m=P(i);return m?E.createWithExternalSource(p,m,{extent:a,transform:f,vertexSpace:u,unitConversionDisabled:!0}):E.createIncomplete(p,{extent:a,transform:f,vertexSpace:u})}var c;function O(t,o){const e=new Map;for(const r of o){const s=r.parentGlobalId;if(s==null)continue;const n=r.assetName,i=r.assetType,p=r.assetHash,a=r.assetURL,f=r.conversionStatus,u=r.seqNo,m=M(i,t.supportedFormats);if(!m){I().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const d=l(e,s,()=>({files:new Map}));l(d.files,n,()=>({name:n,type:i,mimeType:m,status:$(f),parts:[]})).parts[u]={hash:p,url:a}}return e}function P(t){const o=Array.from(t.files.values()),e=new Array;for(const r of o){if(r.status!==c.COMPLETED)return null;const s=new Array;for(const n of r.parts){if(!n)return null;s.push(new N(n.url,n.hash))}e.push(new D(r.name,r.mimeType,s))}return e}function $(t){switch(t){case"COMPLETED":case"SUBMITTED":return c.COMPLETED;case"INPROGRESS":return c.PENDING;default:return c.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(c||(c={}));export{O as assetMapFromAssetMapsJSON,L as extractMesh,nt as meshFeatureSetFromJSON};
