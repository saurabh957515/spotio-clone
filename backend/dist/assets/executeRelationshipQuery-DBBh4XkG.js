import{aQ as f,em as y,bC as m}from"./index-IeegpAPg.js";import{t as j}from"./query-CucHdm2a.js";import{d as R}from"./FeatureSet--t3TP_gY.js";import{d as p}from"./featureLayerUtils-DOfcdp_A.js";import"./pbfQueryUtils-BQwCMRdG.js";import"./pbf-DkH7zH7h.js";import"./OptimizedFeature-CIptWNVu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-BviGmGlG.js";import"./jsonUtils-CKn8N5rB.js";import"./UniqueValueRenderer-BRA4hJF2.js";import"./ColorStop-DcLcp94M.js";import"./diffUtils-BsmLiWuX.js";import"./colorRamps-DtdPWJTS.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-BxjHbii2.js";import"./jsonUtils-Y19K1K5D.js";import"./defaults-Ca7Ezrxv.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-72oPtPHD.js";import"./LRUCache-B9Ch9jyy.js";import"./FieldsIndex-1XykZMxf.js";import"./UnknownTimeZone-Bp45PPyc.js";import"./OverrideHelper-Beyhf6nl.js";import"./colorUtils-D0_txqzP.js";import"./vec42-DVf6basU.js";import"./vec4f64-CMoMXWBi.js";import"./utils-DyJ7tXUW.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-D5PvWHeA.js";import"./heatmapUtils-gC4I9bES.js";function b(r,o){const t=r.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!o?.returnCountOnly?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function F(r,o,t){const i=await l(r,o,t),e=i.data,a=e.geometryType,n=e.spatialReference,s={};for(const c of e.relatedRecordGroups){const d={fields:void 0,objectIdFieldName:void 0,geometryType:a,spatialReference:n,hasZ:!!e.hasZ,hasM:!!e.hasM,features:c.relatedRecords};if(c.objectId!=null)s[c.objectId]=d;else for(const u of Object.keys(c))u!=="relatedRecords"&&(s[c[u]]=d)}return{...i,data:s}}async function h(r,o,t){const i=await l(r,o,t,{returnCountOnly:!0}),e=i.data,a={};for(const n of e.relatedRecordGroups)n.objectId!=null&&(a[n.objectId]=n.count);return{...i,data:a}}async function l(r,o,t={},i){const e=j({...r.query,f:"json",...i,...b(o,i)});return f(r.path+"/queryRelatedRecords",{...t,query:{...t.query,...e}})}async function Y(r,o,t){o=p.from(o);const i=m(r);return F(i,o,t).then(e=>{const a=e.data,n={};return Object.keys(a).forEach(s=>n[s]=R.fromJSON(a[s])),n})}async function _(r,o,t){o=p.from(o);const i=m(r);return h(i,o,{...t}).then(e=>e.data)}export{Y as executeRelationshipQuery,_ as executeRelationshipQueryForCount};
