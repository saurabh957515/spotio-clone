const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/geometryEngine-py4O6gjY.js","assets/index-IeegpAPg.js","assets/index-D9t-g9sQ.css","assets/geometryEngineBase-8g0RzW7z.js","assets/_commonjsHelpers-DCkdB7M8.js","assets/hydrated-xYJZWj2j.js","assets/imageryUtils-DyY8Iocn.js","assets/utils-DmG_qk4T.js","assets/originUtils-CPX8CCAY.js","assets/multiOriginJSONSupportUtils-C0wm8_Yw.js","assets/jsonContext-BVLwkilL.js","assets/saveUtils-CkSwW6BN.js"])))=>i.map(i=>d[i]);
import{v as w,w as b,d$ as at,x as Y,bM as wt,kR as It,cn as ee,bE as ot,n as ne,aY as Je,bi as J,bk as z,s as C,aQ as lt,ey as bt,aX as A,hl as Rt,_ as ct,a_ as vt,eq as St,cG as Tt,bI as _t,kS as Ft,b4 as kt,ax as Ct,kT as Ot,dI as ut,kU as Pt,F as Me,X as Mt,hm as $t,aP as Nt,I as Dt,dT as Bt,dX as Et,dV as Jt,dW as At,dU as Lt,dY as Ht,bL as zt,eU as Wt,bg as Gt,bA as ce,y as jt,d_ as Ut,z as qt,e2 as Vt}from"./index-IeegpAPg.js";import{l as Xt}from"./ArcGISService-CIVcan3f.js";import{e as Yt}from"./CustomParametersMixin-seLw3Ail.js";import{a as Kt,c as Qt,N as $e,l as Zt,d as ei,b as ti,g as ii,e as qe,W as Ve,z as si,L as ri,U as ni,E as ai,q as Xe,t as oi,f as li,h as ci,o as ui}from"./RasterPresetRendererMixin-a8tVZGZK.js";import{h as ht,w as ft,a as hi,i as fi,p as Ae,d as Ye,o as di,f as Ke,g as mi}from"./multidimensionalUtils-DDoUcqMt.js";import{j as pi,n as Re,m as Le,_ as yi,a as ve,h as gi,g as He,P as xi,r as wi,b as Qe,F as Ii,U as bi,N as Ri,c as me,B as vi,L as Si,D as Ti,R as _i}from"./RasterSymbolizer-CUl201B6.js";import{i as Ze,m as et,x as tt,h as Fi,s as ki}from"./RawBlockCache-BUqNP6zQ.js";import{U as Te,D as dt,R as Ci,u as Oi,l as Pi,c as Mi,f as $i,s as Ni,g as we,d as Di,E as Bi,W as Ei,T as Ji}from"./dataUtils-CPAAlZkE.js";import{V as pe,v as Ne,I as it,l as st,a as Ai,e as _e,K as Ie,i as Li,t as Hi,C as zi,D as De}from"./rasterProjectionHelper-vZuUTuyX.js";import{h as Be,l as Wi,T as mt,y as ze,c as Gi,w as ji}from"./PolynomialTransform-BeFtkZlD.js";import{d as We}from"./FeatureSet--t3TP_gY.js";import{l as Ui}from"./TemporalLayer-X1Uvg484.js";import{T as qi}from"./TilemapCache-BSrlFZE6.js";import{p as Vi}from"./popupUtils-BWB8Dp2p.js";import{A as ye}from"./interfaces-CL2NbQte.js";import"./UniqueValueRenderer-BRA4hJF2.js";import"./ColorStop-DcLcp94M.js";import"./diffUtils-BsmLiWuX.js";import"./colorRamps-DtdPWJTS.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-BxjHbii2.js";import"./jsonUtils-Y19K1K5D.js";import"./defaults-Ca7Ezrxv.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-72oPtPHD.js";import"./ClassBreaksDefinition-C6O4AXtE.js";import"./utils-BjDkI-Ko.js";import"./cimSymbolUtils-B6qzjiDK.js";import"./utils-DyJ7tXUW.js";import"./enums-CmIX1y88.js";import"./LRUCache-B9Ch9jyy.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./colorUtils-D0_txqzP.js";import"./vec42-DVf6basU.js";import"./vec4f64-CMoMXWBi.js";import"./TimeInfo-BokYbqlu.js";import"./ByteSizeUnit-BsxeN7wM.js";const rt=8,Xi=256;let Yi=0,B=class extends wt{constructor(){super(...arguments),this._tileFetchQueue=new It({concurrency:32,process:(i,e)=>this._fetchRawTile(i.pyramidLevel,i.row,i.col,{...i.options,signal:e})}),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}normalizeCtorArgs(i){return i?.ioConfig&&(i={...i,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:ee.create(),...i.ioConfig}}),i}get _isGlobalWrappableSource(){const{rasterInfo:i}=this,e=pe(i.spatialReference);return e!=null&&i.extent.width>=e/2}get _hasNoneOrGCSShiftTransform(){const{transform:i}=this.rasterInfo;return i==null||i.type==="gcs-shift"}set rasterJobHandler(i){this._set("rasterJobHandler",i),this.datasetFormat==="Function"&&this.primaryRasters?.rasters?.forEach(e=>e.rasterJobHandler=i)}get rasterId(){return this.url||"rasterId-"+Yi++}set url(i){this._set("url",ot(i,ne.getLogger(this)))}async open(i){return this._openPromise??=Ne().then(()=>this._open(i)),this._openPromise}async fetchTile(i,e,r,t={}){const s=t.tileInfo||this.rasterInfo.storageInfo.tileInfo,a=this.getTileExtentFromTileInfo(i,e,r,s);return t={noClip:!0,...t},this.fetchPixels(a,s.size[0],s.size[1],t)}async identify(i,e={}){i=Je(J,i).clone().normalize();const{multidimensionalDefinition:r,timeExtent:t}=e,{rasterInfo:s}=this,{hasMultidimensionalTranspose:a,multidimensionalInfo:n}=s;let{transposedVariableName:l}=e;const o=n!=null&&a&&(t!=null||ht(r));o&&!l&&(l=r!=null&&r.length>0?r[0].variableName??void 0:n.variables[0].name,e={...e,transposedVariableName:l}),e=this._getRequestOptionsWithSliceId(e);const{spatialReference:c,extent:u}=s,{datumTransformation:d}=e;let h=it(i,c,d);if(!u.intersects(h))return{location:h,value:null};if(s.transform!=null){const F=s.transform.inverseTransform(h);if(!s.nativeExtent.intersects(F))return{location:F,value:null};h=F}let f=0;const y=l!=null&&n!=null&&s.hasMultidimensionalTranspose;if(this.datasetFormat==="Function"){const F=this.primaryRasters.rasters[0];if(y)return F.identify(h,e);const{pixelSize:M}=s,O=3,$=M.x*O/2,N=M.y*O/2,E=new z({xmin:h.x-$,xmax:h.x+$,ymin:h.y-N,ymax:h.y+N,spatialReference:c}),H={interpolation:"nearest",multidimensionalDefinition:r,sliceId:e.sliceId},{pixelBlock:q}=await F.fetchPixels(E,O,O,H),{pixelBlock:W}=await this.fetchPixels(E,O,O,H);if(q==null)return{location:h,value:null};const G=Math.floor(O*O*.5),K=!q.mask||q.mask[G]?q.pixels.map(U=>U[G]):null;let te;return W!=null&&(te=!W.mask||W.mask[G]?W.pixels.map(U=>U[G]):void 0),{location:h,value:K,processedValue:te,pyramidLevel:0}}if(!y){if(e.srcResolution)f=st(e.srcResolution,s,this.ioConfig.sampling).pyramidLevel;else if(f=await this.computeBestPyramidLevelForLocation(i,e),f==null)return{location:h,value:null}}const g=this.identifyPixelLocation(h,f,null,y);if(g===null)return{location:h,value:null};const{row:m,col:p,rowOffset:x,colOffset:R,blockWidth:I}=g,S=l??e.sliceId,T=Ze(this.rasterId,S),v=`${f}/${m}/${p}`;let k=et(T,null,v);k==null&&(k=this.fetchRawTile(f,m,p,e),tt(T,null,v,k));const _=await k;if(!_?.pixels?.length)return{location:h,value:null};const P=x*I+R;return this._processIdentifyResult(_,{srcLocation:h,position:P,pyramidLevel:f,useTransposedTile:!!y,requestSomeSlices:o,identifyOptions:e})}async fetchPixels(i,e,r,t={}){i=Ai(i),t=this._getRequestOptionsWithSliceId(t);const{_hasNoneOrGCSShiftTransform:s}=this;if(t.requestRawData&&s)return this._fetchPixels(i,e,r,t);const a=pe(i.spatialReference),n=_e(i);if(a==null||n===0||n===1&&this._isGlobalWrappableSource&&s)return this._fetchPixels(i,e,r,t);if(n>=3)return{extent:i,pixelBlock:null};const l=[],{xmin:o,xmax:c}=i,u=Math.round(a/(c-o)*e),d=u-Math.round((a/2-o)/(c-o)*e);let h=0;const f=[];for(let p=0;p<=n;p++){const x=new z({xmin:p===0?o:-a/2,xmax:p===n?c-a*p:a/2,ymin:i.ymin,ymax:i.ymax,spatialReference:i.spatialReference}),R=p===0?u-d:p===n?e-h:u;h+=R,f.push(R);const I=t.disableWrapAround&&p>0?null:this._fetchPixels(x,R,r,t);l.push(I)}const y=(await Promise.all(l)).map(p=>p?.pixelBlock);let g=null;const m={width:e,height:r};return this.rasterJobHandler?g=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:y,srcMosaicSize:m,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:f},t)).pixelBlock:g=Te(y,m,{blockWidths:f}),{extent:i,srcExtent:Ie(i,this.rasterInfo.spatialReference,t.datumTransformation),pixelBlock:g}}async fetchRawPixels(i,e,r,t={}){e={x:Math.floor(e.x),y:Math.floor(e.y)};const s=await this._fetchRawTiles(i,e,r,t),{nativeExtent:a,nativePixelSize:n,storageInfo:l}=this.rasterInfo,o=2**i,c=n.x*o,u=n.y*o,d=new z({xmin:a.xmin+c*e.x,xmax:a.xmin+c*(e.x+r.width-1),ymin:a.ymax-u*(e.y+r.height-1),ymax:a.ymax-u*e.y,spatialReference:a.spatialReference});if(!s)return{extent:d,srcExtent:d,pixelBlock:null};const{pixelBlocks:h,mosaicSize:f}=s;if(h.length===1&&h[0]!=null&&h[0].width===r.width&&h[0].height===r.height)return{extent:d,srcExtent:d,pixelBlock:s.pixelBlocks[0]};const y=i>0?l.pyramidBlockWidth:l.blockWidth,g=i>0?l.pyramidBlockHeight:l.blockHeight,m={x:e.x%y,y:e.y%g};let p;return this.rasterJobHandler?p=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:h,srcMosaicSize:f,destDimension:r,clipOffset:m,clipSize:r,coefs:null,sampleSpacing:null,interpolation:t.interpolation,alignmentInfo:null,blockWidths:null},t)).pixelBlock:p=Te(h,f,{clipOffset:m,clipSize:r}),{extent:d,srcExtent:d,pixelBlock:p}}fetchRawTile(i,e,r,t){throw new C("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(i){return Ie(this.rasterInfo.extent,i)}decodePixelBlock(i,e){return!this.rasterJobHandler||e.useCanvas?pi(i,e):this.rasterJobHandler.decode({data:i,options:e})}async request(i,e,r=0){const{customFetchParameters:t}=this.ioConfig,{range:s,query:a,headers:n}=e;r=r??e.retryCount??this.ioConfig.retryCount;const l=s?{Range:`bytes=${s.from}-${s.to}`}:null;try{return await lt(i,{...e,query:{...a,...t},headers:{...n,...l}})}catch(o){if(r>0)return r--,this.request(i,e,r);throw o}}getSliceIndex(i){const{multidimensionalInfo:e}=this.rasterInfo;return e==null||i==null||i.length===0?null:ft(i,e)}getTileExtentFromTileInfo(i,e,r,t){const s=t.lodAt(i);return this.getTileExtent({x:s.resolution,y:s.resolution},e,r,t.origin,t.spatialReference,t.size)}updateTileInfo(){const{storageInfo:i,spatialReference:e,extent:r,pixelSize:t}=this.rasterInfo,{pyramidResolutions:s}=i;if(!i.tileInfo){const a=[],n=i.maximumPyramidLevel||0;let l=(t.x+t.y)/2,o=1/.0254*96*l;for(let u=0;u<=n&&(a.unshift(new bt({level:n-u,resolution:l,scale:o})),u!==n);u++)if(s){const d=(s[u].x+s[u].y)/2;o*=d/l,l=d}else l*=2,o*=2;const c=new J({x:r.xmin,y:r.ymax,spatialReference:e});i.tileInfo=new ee({origin:c,size:[i.blockWidth,i.blockHeight],spatialReference:e,lods:a}),i.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(i,e=512,r=512,t){const{width:s,height:a,nativeExtent:n,pixelSize:l,spatialReference:o}=i,c=new J({x:n.xmin,y:n.ymax,spatialReference:o});t==null&&(t=Math.max(0,Math.round(Math.log(Math.max(s,a))/Math.LN2-8)));const u=this.computeBlockBoundary(n,512,512,{x:n.xmin,y:n.ymax},[l],t);i.storageInfo=new Re({blockWidth:e,blockHeight:r,pyramidBlockWidth:e,pyramidBlockHeight:r,origin:c,firstPyramidLevel:1,maximumPyramidLevel:t,blockBoundary:u})}async computeBestPyramidLevelForLocation(i,e={}){return 0}computeBlockBoundary(i,e,r,t,s,a=0,n=2){if(s.length===1&&a>0){s=[...s];let{x:u,y:d}=s[0];for(let h=0;h<a;h++)u*=n,d*=n,s.push({x:u,y:d})}const l=[],{x:o,y:c}=t;for(let u=0;u<s.length;u++){const{x:d,y:h}=s[u];l.push({minCol:Math.floor((i.xmin-o+.1*d)/e/d),maxCol:Math.floor((i.xmax-o-.1*d)/e/d),minRow:Math.floor((c-i.ymax+.1*h)/r/h),maxRow:Math.floor((c-i.ymin-.1*h)/r/h)})}return l}getPyramidPixelSize(i){const{nativePixelSize:e}=this.rasterInfo,{pyramidResolutions:r,pyramidScalingFactor:t}=this.rasterInfo.storageInfo;if(i===0)return e;if(r!=null&&r.length)return r[i-1];const s=t**i;return{x:e.x*s,y:e.y*s}}identifyPixelLocation(i,e,r,t){const{spatialReference:s,nativeExtent:a,storageInfo:n}=this.rasterInfo,{maximumPyramidLevel:l,origin:o,transposeInfo:c}=n,u=t&&c!=null?c.tileSize[0]:n.blockWidth,d=t&&c!=null?c.tileSize[1]:n.blockHeight,h=it(i,s,r);if(!a.intersects(h)||e<0||e>l)return null;const f=this.getPyramidPixelSize(e),{x:y,y:g}=f,m=(o.y-h.y)/g/d,p=(h.x-o.x)/y/u,x=Math.min(d-1,Math.floor((m-Math.floor(m))*d)),R=Math.min(u-1,Math.floor((p-Math.floor(p))*u));return{pyramidLevel:e,row:Math.floor(m),col:Math.floor(p),rowOffset:x,colOffset:R,blockWidth:u,srcLocation:h}}getTileExtent(i,e,r,t,s,a){const[n,l]=a,o=t.x+r*n*i.x,c=o+n*i.x,u=t.y-e*l*i.y,d=u-l*i.y;return new z({xmin:o,xmax:c,ymin:d,ymax:u,spatialReference:s})}getBlockWidthHeight(i){return{blockWidth:i>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:i>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(i,e,r){const t=this.rasterInfo.storageInfo.blockBoundary[i];return!t||t.maxRow<e||t.maxCol<r||t.minRow>e||t.minCol>r}updateImageSpaceRasterInfo(i){const{pixelSize:e}=i,{width:r,height:t}=i,s=A.WebMercator;i.spatialReference=s,i.extent=i.nativeExtent=new z({xmin:-.5,ymax:.5,xmax:r-.5,ymin:.5-t,spatialReference:s}),i.isPseudoSpatialReference=!0,i.transform=null,i.pixelSize=new J({x:1,y:1,spatialReference:s});const{extent:a,storageInfo:n}=i;if(n){n.origin=new J({x:a.xmin,y:a.ymax,spatialReference:s});const{pyramidResolutions:l,tileInfo:o}=n;if(l&&l.forEach(c=>{c.x/=e.x,c.y/=e.y}),o){o.origin=n.origin;const c=(i.nativePixelSize.x+i.nativePixelSize.y)/2;o.lods.forEach((u,d)=>{u.resolution=c*2**d,u.scale=96*u.resolution/.0254})}}}async _fetchPixels(i,e,r,t={}){let s=_e(i);if(s>=2)return{extent:i,pixelBlock:null};const a=this._getSourceDataInfo(i,e,r,t),{pyramidLevel:n,srcResolution:l,srcExtent:o,srcWidth:c,srcHeight:u,ul:d}=a;if(c===0||u===0)return{extent:i,srcExtent:o,pixelBlock:null};const{rasterInfo:h}=this,f=h.transform,y=f?.type==="gcs-shift",g=pe(i.spatialReference)!=null;!y&&g||(s=_e(a.srcExtent,y));const m=await this._fetchRawTiles(n,d,{width:c,height:u,wrapCount:s},t);if(!m)return{extent:i,srcExtent:o,pixelBlock:null};const p=h.storageInfo,x=n>0?p.pyramidBlockWidth:p.blockWidth,R=n>0?p.pyramidBlockHeight:p.blockHeight;let{x:I,y:S}=h.pixelSize;if(n>0){const{pyramidResolutions:Q,pyramidScalingFactor:xt}=p;if(Q!=null&&Q[n-1])({x:I,y:S}=Q[n-1]);else{const Ue=xt**n;I*=Ue,S*=Ue}}const T=h.spatialReference,v=new J({x:I,y:S,spatialReference:T}),k=x===c&&R===u&&d.x%x==0&&d.y%R==0,_=new J({x:(i.xmax-i.xmin)/e,y:(i.ymax-i.ymin)/r,spatialReference:i.spatialReference}),P=!i.spatialReference.equals(T),F=T.isGeographic?1e-9:1e-4,{datumTransformation:M}=t;if(!P&&k&&m.pixelBlocks.length===1&&x===e&&R===r&&Ki(l,_,F))return{extent:i,srcExtent:o,srcTilePixelSize:v,pixelBlock:m.pixelBlocks[0]};const O=g&&pe(o.spatialReference)!=null&&this._hasNoneOrGCSShiftTransform,$=t.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");$&&!this.rasterJobHandler&&await Ne();const N=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:i,srcBufferExtent:m.extent,pixelSize:_.toJSON(),datumTransformation:M,rasterTransform:f,hasWrapAround:s>0||O,isAdaptive:this.ioConfig.optimizeProjectionAccuracy!==!1,includeGCSGrid:$},t):Li({projectedExtent:i,srcBufferExtent:m.extent,pixelSize:_,datumTransformation:M,rasterTransform:f,hasWrapAround:s>0||O,isAdaptive:!1,includeGCSGrid:$});let E;const H=!t.requestRawData,q={rows:N.spacing[0],cols:N.spacing[1]},W=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(n,m.extent.xmin):void 0,{pixelBlocks:G,mosaicSize:K,isPartiallyFilled:te}=m;let U=null;if(this.rasterJobHandler)({pixelBlock:E,localNorthDirections:U}=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:G,srcMosaicSize:K,destDimension:H?{width:e,height:r}:null,coefs:H?N.coefficients:null,sampleSpacing:H?q:null,projectDirections:$,gcsGrid:$?N.gcsGrid:null,isUV:this.rasterInfo.dataType==="vector-uv",interpolation:t.interpolation,alignmentInfo:W,blockWidths:null},t));else{const Q=Te(G,K,{alignmentInfo:W});E=H?dt(Q,{width:e,height:r},N.coefficients,q,t.interpolation):Q,$&&N.gcsGrid&&(U=Ci({width:e,height:r},N.gcsGrid),E=Oi(E,this.rasterInfo.dataType,U))}return t.requestRawData||$?{extent:i,srcExtent:o,srcTilePixelSize:v,pixelBlock:E,transformGrid:N,localNorthDirections:U,isPartiallyFilled:te}:{extent:i,srcExtent:o,srcTilePixelSize:v,pixelBlock:E}}async _fetchRawTiles(i,e,r,t){const{origin:s,blockBoundary:a}=this.rasterInfo.storageInfo,{blockWidth:n,blockHeight:l}=this.getBlockWidthHeight(i);let{x:o,y:c}=e,{width:u,height:d,wrapCount:h}=r;const f=this._getRasterTileAlignmentInfo(i,0);t.buffer&&(o-=t.buffer.cols,c-=t.buffer.rows,u+=2*t.buffer.cols,d+=2*t.buffer.rows);let y=0,g=0,m=0;h&&f!=null&&({worldColumnCountFromOrigin:g,originColumnOffset:m,rightPadding:y}=f,g*f.blockWidth-y>=o+u&&(y=0));const p=Math.floor(o/n),x=Math.floor(c/l),R=Math.floor((o+u+y-1)/n),I=Math.floor((c+d+y-1)/l),S=a[i];if(!S)return null;const{minRow:T,minCol:v,maxCol:k,maxRow:_}=S;if(h===0&&(I<T||R<v||x>_||p>k))return null;const P=new Array;let F=!1;const M=this.ioConfig.allowPartialFill==null?t.allowPartialFill:this.ioConfig.allowPartialFill;for(let W=x;W<=I;W++)for(let G=p;G<=R;G++){let K=G;if(!t.disableWrapAround&&h&&f!=null&&g<=G&&(K=G-g-m),W>=T&&K>=v&&_>=W&&k>=K){const te=this._tileFetchQueue.push({pyramidLevel:i,row:W,col:K,options:t},{signal:t.signal});M?P.push(new Promise(U=>{te.then(Q=>U(Q)).catch(()=>{F=!0,U(null)})})):P.push(te)}else P.push(Promise.resolve(null))}if(P.length===0)return null;const O=await Promise.all(P),$={height:(I-x+1)*l,width:(R-p+1)*n},{spatialReference:N}=this.rasterInfo,E=this.getPyramidPixelSize(i),{x:H,y:q}=E;return{extent:new z({xmin:s.x+p*n*H,xmax:s.x+(R+1)*n*H,ymin:s.y-(I+1)*l*q,ymax:s.y-x*l*q,spatialReference:N}),pixelBlocks:O,mosaicSize:$,isPartiallyFilled:F}}_fetchRawTile(i,e,r,t){const s=this.rasterInfo.storageInfo.blockBoundary[i];if(!s)return Promise.resolve(null);const{minRow:a,minCol:n,maxCol:l,maxRow:o}=s;if(e<a||r<n||e>o||r>l)return Promise.resolve(null);const c=Ze(this.rasterId,t.sliceId),u=`${i}/${e}/${r}`;let d=et(c,t.registryId,u);if(d==null){const h=new AbortController;d=this.fetchRawTile(i,e,r,{...t,signal:h.signal}),tt(c,t.registryId,u,d,h),d.catch(()=>Fi(c,t.registryId,u))}return t.signal&&Rt(t,()=>{ki(c,t.registryId,u)}),d}_computeMagDirValues(i){const{bandCount:e,dataType:r}=this.rasterInfo;if(!(e===2&&r==="vector-magdir"||r==="vector-uv")||i?.length!==2||!i[0]?.length)return null;const t=i[0].length;if(r==="vector-magdir"){const o=i[1].map(c=>(c+360)%360);return[i[0],o]}const[s,a]=i,n=[],l=[];for(let o=0;o<t;o++){const[c,u]=Pi([s[o],a[o]]);n.push(c),l.push(u)}return[n,l]}_getRasterTileAlignmentInfo(i,e){return this._rasterTileAlignmentInfo==null&&(this._rasterTileAlignmentInfo=Hi(this.rasterInfo)),this._rasterTileAlignmentInfo.pyramidsInfo==null?null:{startX:e,halfWorldWidth:this._rasterTileAlignmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlignmentInfo.hasGCSSShiftTransform,...this._rasterTileAlignmentInfo.pyramidsInfo[i]}}_getSourceDataInfo(i,e,r,t={}){const s={datumTransformation:t.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};t.srcResolution&&(s.srcResolution=t.srcResolution,this._updateSourceDataInfo(i,s));const a=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:n,srcHeight:l,pyramidLevel:o}=s,c=n/e,u=l/r,d=o<a&&c*u>=16,h=o===a&&this._requireTooManySrcTiles(n,l,e,r);if(d||h||n===0||l===0){const f=new J({x:(i.xmax-i.xmin)/e,y:(i.ymax-i.ymin)/r,spatialReference:i.spatialReference});let y=zi(f,this.rasterInfo.spatialReference,i,s.datumTransformation);const g=!y||t.srcResolution&&y.x+y.y<t.srcResolution.x+t.srcResolution.y;if(d&&t.srcResolution&&g){const m=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(a-o+3>=m){const p=2**m;y={x:t.srcResolution.x*p,y:t.srcResolution.y*p}}}y&&(s.srcResolution=y,this._updateSourceDataInfo(i,s))}return this._requireTooManySrcTiles(s.srcWidth,s.srcHeight,e,r)&&(s.srcWidth=0,s.srcHeight=0),s}_requireTooManySrcTiles(i,e,r,t){const{tileInfo:s}=this.rasterInfo.storageInfo,a=Math.ceil(i/s.size[0])*Math.ceil(e/s.size[1]),n=i/r,l=e/t,o=Math.max(1,(r+t)/1024);return a>=Xi*o||n>rt||l>rt}_updateSourceDataInfo(i,e){e.srcWidth=0,e.srcHeight=0;const{rasterInfo:r}=this,t=r.spatialReference,{srcResolution:s,datumTransformation:a}=e,{pyramidLevel:n,pyramidResolution:l,excessiveReading:o}=st(s,r,this.ioConfig.sampling);if(o)return;let c=e.srcExtent||Ie(i,t,a);if(c==null)return;const u=r.transform;u&&(c=u.inverseTransform(c)),e.srcExtent=c;const{x:d,y:h}=r.storageInfo.origin,f=Math.floor((c.xmin-d)/l.x+.1),y=Math.floor((h-c.ymax)/l.y+.1),g=Math.floor((c.xmax-d)/l.x-.1),m=Math.floor((h-c.ymin)/l.y-.1),p=c.width<.1*l.x?0:g-f+1,x=c.height<.1*l.y?0:m-y+1;e.pyramidLevel=n,e.pyramidResolution=l,e.srcWidth=p,e.srcHeight=x,e.ul={x:f,y}}_getRequestOptionsWithSliceId(i){return this.rasterInfo.multidimensionalInfo!=null&&i.sliceId==null&&(i={...i,sliceId:this.getSliceIndex(i.multidimensionalDefinition)}),i}_processIdentifyResult(i,e){const{srcLocation:r,position:t,pyramidLevel:s,useTransposedTile:a}=e,n=i.pixels[0].length/i.width/i.height;if(!(!i.mask||i.mask[t]))return{location:r,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if(l==null||!a){const m=i.pixels.map(R=>R[t]),p={location:r,value:m,pyramidLevel:s},x=this._computeMagDirValues(m.map(R=>[R]));return x?.length&&(p.magdirValue=x.map(R=>R[0])),p}let o=i.pixels.map(m=>m.slice(t*n,t*n+n)),c=this._computeMagDirValues(o);const{requestSomeSlices:u,identifyOptions:d}=e;let h=hi(l,d.transposedVariableName);if(u){const m=fi(h,d.multidimensionalDefinition,d.timeExtent);o=o.map(p=>m.map(x=>p[x])),c=c?.map(p=>m.map(x=>p[x])),h=m.map(p=>h[p])}const f=i.noDataValues||this.rasterInfo.noDataValue,y={pixels:o,pixelType:i.pixelType};let g;return f!=null&&(Mi(y,f),g=y.mask),{location:r,value:null,dataSeries:h.map((m,p)=>{const x={value:g?.[p]===0?null:o.map(R=>R[p]),multidimensionalDefinition:m.multidimensionalDefinition.map(R=>new Ae({...R,isSlice:!0}))};return c?.length&&(x.magdirValue=[c[0][p],c[1][p]]),x}),pyramidLevel:s}}};function Ki(i,e,r){return Math.abs(i.x-e.x)<r&&Math.abs(i.y-e.y)<r}w([b()],B.prototype,"_rasterTileAlignmentInfo",void 0),w([b()],B.prototype,"_tileFetchQueue",void 0),w([b({readOnly:!0})],B.prototype,"_isGlobalWrappableSource",null),w([b({readOnly:!0})],B.prototype,"_hasNoneOrGCSShiftTransform",null),w([b()],B.prototype,"_openPromise",void 0),w([b()],B.prototype,"rasterJobHandler",null),w([b({readOnly:!0})],B.prototype,"rasterId",null),w([b(at)],B.prototype,"url",null),w([b({type:String,json:{write:!0}})],B.prototype,"datasetName",void 0),w([b({type:String,json:{write:!0}})],B.prototype,"datasetFormat",void 0),w([b()],B.prototype,"hasUniqueSourceStorageInfo",void 0),w([b()],B.prototype,"rasterInfo",void 0),w([b()],B.prototype,"ioConfig",void 0),w([b()],B.prototype,"sourceJSON",void 0),B=w([Y("esri.layers.support.rasterDatasets.BaseRaster")],B);const ae=B,Qi=40;let ie=class extends ae{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null,this._clippingGeometry=new Map}async fetchPixels(e,r,t,s={}){const{rasters:a,rasterIds:n}=this.primaryRasters;let l=!1;const{interpolation:o}=s,c=this.rasterFunction.flatWebGLFunctionChain?.hasFocalFunction;!s.requestRawData&&c&&(l=a.length===1&&!s.skipRasterFunction,s={...s,interpolation:"bilinear",requestRawData:l});const u=a.map(I=>I.fetchPixels(e,r,t,s)),d=await Promise.all(u),h=d.map(I=>I.pixelBlock),f=l||s.requestRawData?d.map(I=>I.srcTilePixelSize):null;if(s.skipRasterFunction||h.every(I=>I==null))return d[0];const y=d.find(I=>I.pixelBlock!=null)?.extent??e;let g=this.rasterJobHandler?await this.rasterJobHandler.process({extent:y,primaryPixelBlocks:h,primaryPixelSizes:f,primaryRasterIds:n}):this.rasterFunction.process({extent:y,primaryPixelBlocks:h,primaryPixelSizes:f,primaryRasterIds:n});const{transformGrid:m}=d[0];if(!l||g==null||m==null){const I=s.noClip?null:this.getClippingGeometry(y.spatialReference);return s.noClip||s.requestRawData||g==null||!I||(g=await Be(g,y,I)),{...d[0],pixelBlock:g}}const p={rows:m.spacing[0],cols:m.spacing[1]};let x;this.rasterJobHandler?x=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[g],srcMosaicSize:{width:g.width,height:g.height},destDimension:{width:r,height:t},coefs:m.coefficients,sampleSpacing:p,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:o,alignmentInfo:void 0,blockWidths:null},s)).pixelBlock:x=dt(g,{width:r,height:t},m.coefficients,p,o);const R=s.noClip?null:this.getClippingGeometry(e.spatialReference);return s.noClip||s.requestRawData||x==null||R==null||(x=await Be(x,e,R)),{extent:e,srcExtent:d[0].srcExtent,pixelBlock:x}}getClippingGeometry(e){const r=this._clippingGeometry.get("0");if(!e||!r)return r;const t=es(e);let s=this._clippingGeometry.get(t);return s!=null||(s=e.equals(r.spatialReference)?r:De(r,e),this._clippingGeometry.set(t,s)),s}async _open(e){const{rasterFunction:r}=this;this.primaryRasters?.rasters?.length?r.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=r.getPrimaryRasters(),this.rasterJobHandler&&this.primaryRasters.rasters?.forEach(u=>u.rasterJobHandler=this.rasterJobHandler));const{rasters:t,rasterIds:s}=this.primaryRasters,a=t.map(u=>u.rasterInfo?void 0:u.open(e));await Promise.all(a);const n=t.map(({rasterInfo:u})=>u),l=r.bind({rasterInfos:n,rasterIds:s});if(r.rawSourceRasterInfos=n,!l.success||n.length===0)throw new C("raster-function:open",`cannot bind the function: ${l.error??""}`);const o=r.functionName==="Table"?r:r.functionArguments?.raster;o?.functionName==="Table"&&(r.rasterInfo.attributeTable=We.fromJSON(o.functionArguments.attributeTableAsRecordSet)),await this.syncJobHandler();const c=n[0];this.hasUniqueSourceStorageInfo=n.length===1||n.slice(1).every(u=>Zi(u,c)),this.set("sourceJSON",t[0].sourceJSON),this.set("rasterInfo",r.rasterInfo),await this._updateClipGeometry()}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async _updateClipGeometry(){const e=this.rasterFunction.getClippingGeometries()[0];let r=e?.clippingGeometry;if(r&&e.clippingType==="inside"){const{extent:t}=this.rasterInfo,{difference:s,densify:a}=await ct(async()=>{const{difference:l,densify:o}=await import("./geometryEngine-py4O6gjY.js");return{difference:l,densify:o}},__vite__mapDeps([0,1,2,3,4,5]));let n=a(vt.fromExtent(t),2*(t.width+t.height)/Qi);n=De(n,r.spatialReference),r=s(n,r)}this._clippingGeometry.clear(),r&&this._clippingGeometry.set("0",r)}};w([b({type:String,json:{write:!0}})],ie.prototype,"datasetFormat",void 0),w([b()],ie.prototype,"tileType",void 0),w([b()],ie.prototype,"rasterFunction",void 0),w([b()],ie.prototype,"primaryRasters",void 0),ie=w([Y("esri.layers.support.rasterDatasets.FunctionRaster")],ie);const pt=ie;function Zi(i,e){const{storageInfo:r,pixelSize:t,spatialReference:s,extent:a}=i,{storageInfo:n,pixelSize:l,spatialReference:o,extent:c}=e;return t.x===l.x&&t.y===l.y&&s.equals(o)&&a.equals(c)&&r.blockHeight===n.blockHeight&&r.blockWidth===n.blockWidth&&r.maximumPyramidLevel===n.maximumPyramidLevel}function es(i){return String(i.wkid??i.wkt??i.wkt2)}const ts=i=>{let e=class extends i{constructor(...t){super(...t),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation=null,this.multidimensionalSubset=null,this.raster=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster=t[0]?.raster?.datasetFormat==="Function"}get fullExtent(){return this.serviceRasterInfo?.extent}set multidimensionalDefinition(t){this._set("multidimensionalDefinition",t),this.updateRenderer()}set rasterFunction(t){t?.functionName?.toLowerCase()==="none"&&(t=void 0),this._set("rasterFunction",t),this.updateRasterFunction()}get rasterInfo(){return Ft(ne.getLogger(this),"rasterInfo",{replacement:"serviceRasterInfo",version:"4.29",warnOnce:!0}),this._get("serviceRasterInfo")}set url(t){this._set("url",ot(t,ne.getLogger(this)))}get renderer(){if(this.type!=="imagery-tile")return this.internalRenderer;const{activePresetRendererName:t,presetRenderers:s}=this;return t?s?.find(({name:n})=>n===t)?.renderer.clone():this.internalRenderer}set renderer(t){this.type==="imagery-tile"&&(this.activePresetRendererName=null),this.internalRenderer=t}set internalRenderer(t){t==null&&this.rasterFunction==null?this._configDefaultRenderer("override"):(this._set("internalRenderer",t),this.updateRenderer())}readRenderer(t,s,a){const n=s?.layerDefinition?.drawingInfo?.renderer;return ti(n,a)||void 0}async convertVectorFieldData(t,s){const{serviceRasterInfo:a}=this;if(t==null||!a)return null;const n=this._rasterJobHandler.instance,l=a.dataType;return n?n.convertVectorFieldData({pixelBlock:t,dataType:l},s):$i(t,l)}async computeStatisticsHistograms(t,s){await this.load(s),t=Je(ii,t).clone();const{serviceRasterInfo:a}=this;if(a==null)throw new C("imagery-tile-mixin:compute-statistics-histograms","serviceRasterInfo must be specified");const{geometry:n}=t;if(n==null)throw new C("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let l=n;const{spatialReference:o}=a;n.spatialReference.equals(o)||(await Ne(),l=n.type==="extent"?Ie(n,o):De(n,o));const c=t.pixelSize??new J({x:a.pixelSize.x,y:a.pixelSize.y,spatialReference:o}),{extent:u,width:d,height:h}=Wi(a,l,c),f=await this.fetchPixels(u,d,h,{...s,interpolation:"nearest"});if(f.pixelBlock==null)throw new C("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const y=await Be(f.pixelBlock,u,l),g=this._rasterJobHandler.instance;return g?g.computeStatisticsHistograms({pixelBlock:y},s):Le(y)}async createFlowMesh(t,s){const a=this._rasterJobHandler.instance;return a?a.createFlowMesh(t,s):Ni(t.meshType,t.simulationSettings,t.flowData,s.signal!=null?s.signal:new AbortController().signal)}normalizeRasterFetchOptions(t){const{multidimensionalInfo:s}=this.serviceRasterInfo??{};if(s==null)return t;let a=t.multidimensionalDefinition||this.multidimensionalDefinition;a?.length||(a=Ye(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const n=t.timeExtent||this.timeExtent;if(a!=null&&n!=null&&(n.start!=null||n.end!=null)){a=a.map(g=>g.clone());const l=s.variables.find(({name:g})=>g===a[0].variableName)?.dimensions?.find(({name:g})=>g==="StdTime"),o=a.find(({dimensionName:g})=>g==="StdTime");if(!l||!o)return{...t,multidimensionalDefinition:null};const{start:c,end:u}=n,d=c==null?null:c.getTime(),h=u==null?null:u.getTime(),f=d??h,y=h??d;if(l.values!=null){const g=l.values.filter(m=>{if(Array.isArray(m)){if(f===y)return m[0]<=f&&m[1]>=f;const p=m[0]<=f&&m[1]>f||m[0]<y&&m[1]>=y,x=m[0]>=f&&m[1]<=y||m[0]<f&&m[1]>y;return p||x}return f===y?m===f:m>=f&&m<=y});if(g.length){const m=g.sort((p,x)=>{const R=Array.isArray(p)?p[0]:p,I=Array.isArray(p)?p[1]:p,S=Array.isArray(x)?x[0]:x,T=Array.isArray(x)?x[1]:x;return f===y?R-S:Math.abs(I-y)-Math.abs(T-y)})[0];o.values=[m]}else a=null}else if(l.hasRegularIntervals&&l.extent){const[g,m]=l.extent;f>m||y<g?a=null:o.values=f===y?[f]:[Math.max(g,f),Math.min(m,y)]}}return a!=null&&di(a,this.multidimensionalSubset)?{...t,multidimensionalDefinition:null}:{...t,multidimensionalDefinition:a}}async updateRasterFunction(){if(!this.loaded||this.type!=="imagery-tile"||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&this.raster.datasetFormat==="Function"){const u=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&u&&this._set("rasterFunction",$e.fromJSON(u)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let t,s=this.raster,a=!1;s.datasetFormat==="Function"?(t=s.primaryRasters.rasters,s=t[0],a=!0):t=[s];const{rasterFunction:n}=this;if(n){const u={raster:s};t.length>1&&t.forEach(f=>u[f.url]=f);const d=mt(n.functionDefinition?.toJSON()??n.toJSON(),u),h=new pt({rasterFunction:d});h.rasterJobHandler=this._rasterJobHandler.instance,await h.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=h}else this.raster=s,this._cachedRasterFunctionJson=null,await s.open();if(this._cachedRendererJson=null,!a&&!n)return;const{bandIds:l}=this,{bandCount:o}=this.raster.rasterInfo,c=l?.length?l.some(u=>u>=o):o>=3;l&&(c||this.renderer&&this.renderer.type!=="raster-stretch")&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:t,symbolizer:s}=this;if(!t||!s||!this.renderer)return;const{rasterInfo:a}=this.raster,n=Ke(a,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),l=n?.name,o=qe({...this.renderer.toJSON(),variableName:l});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(o))return;const c=this._rasterJobHandler.instance;c&&(s.rasterInfo=Ve(a,l),s.rendererJSON=o,s.bind(),await c.updateSymbolizer(s),this._cachedRendererJson=o)}async applyRenderer(t,s){const a=t?.pixelBlock;if(!(a!=null&&a.pixels&&a.pixels.length>0))return null;let n;await this.updateRenderer();const l=this._rasterJobHandler.instance,o=this.bandIds??[];return n=l?await l.symbolize({...t,simpleStretchParams:s,bandIds:o}):this.symbolizer.symbolize({...t,simpleStretchParams:s,bandIds:o}),n}getTileUrl(t,s,a){return this.raster.datasetFormat==="RasterTileServer"?`${this.url}/tile/${t}/${s}/${a}`:""}getCompatibleTileInfo(t,s,a=!1){if(!this.loaded||s==null)return null;if(a&&t.equals(this.spatialReference))return this.tileInfo;const n=kt(t);return ee.create({size:256,spatialReference:t,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:s.xmin,y:s.ymax}})}getCompatibleFullExtent(t){return this.loaded?(this._compatibleFullExtent?.spatialReference.equals(t)||(this._compatibleFullExtent=this.raster.computeExtent(t)),this._compatibleFullExtent):null}async fetchTile(t,s,a,n={}){if(r(this),n.requestAsImageElement){const o=this.getTileUrl(t,s,a);return lt(o,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then(c=>c.data)}const{serviceRasterInfo:l}=this;if(l.multidimensionalInfo!=null&&(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition==null){const o=n.tileInfo||l.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(t,s,a,o),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),this.renderer?.type==="raster-shaded-relief"&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(t,s,a,n)}async fetchPixels(t,s,a,n={}){return this.serviceRasterInfo.multidimensionalInfo!=null&&(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition==null?{extent:t,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),s=Math.round(s),a=Math.round(a),this.raster.fetchPixels(t,s,a,n))}async identify(t,s={}){await this.load();const{raster:a,serviceRasterInfo:n}=this;if(n?.multidimensionalInfo!=null&&!(n.hasMultidimensionalTranspose&&(ht(s.multidimensionalDefinition)||s.transposedVariableName||s.timeExtent))&&(s=this.normalizeRasterFetchOptions(s)).multidimensionalDefinition==null)return{location:t,value:null};const l=this.multidimensionalSubset?.areaOfInterest;if(l&&!l.contains(t))throw new C("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return a.identify(t,s)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const t=this.serviceRasterInfo?.multidimensionalInfo;if(t==null||this.serviceRasterInfo?.dataType!=="standard-time")return!1;const s=this.multidimensionalDefinition,a=s?.[0]?.variableName;return t.variables.some(n=>n.name===a&&(!s?.[0].dimensionName||n.dimensions.some(l=>l.name==="StdTime")))}getStandardTimeValue(t){return new Date(24*(t-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(t){const s=t??this.serviceRasterInfo?.multidimensionalInfo;return mi(this.multidimensionalSubset,s)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=Ye(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&this.raster.datasetFormat==="Function"&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}_initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const t=new oi;return this._rasterJobHandler.connectionPromise=t.initialize().then(async()=>{r(this),this._rasterJobHandler.instance=t,this.raster.rasterJobHandler=t,this.raster.datasetFormat==="Function"&&this.raster.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch(()=>{}),this.renderer&&this.updateRenderer()}).catch(()=>{}),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(this.interpolation==null){r(this);const{raster:t}=this,s=si(t.rasterInfo,t.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",s)}}_configDefaultRenderer(t="no"){r(this);const{rasterInfo:s}=this.raster,a=Ke(s,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),n=a?.name,l=ri({variableName:n,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&s.bandCount>1&&(this.bandIds=l?.bandIds??ni(s)),!this.renderer||t==="override"){const d=ai(this.raster),h=l?.renderer??Xe(s,{bandIds:this.bandIds,variableName:n,rasterFunctionColorRamp:d}),f=s.statistics,y=f&&f.length>0?f[0]:null,g=y?.max??0,m=y?.min??0;this.raster.datasetFormat==="WCSServer"&&h.type==="raster-stretch"&&(g>1e24||m<-1e24)&&(h.dynamicRangeAdjustment=!0,h.customStatistics=null,h.stretchType==="none"&&(h.stretchType="min-max")),this.renderer=h}const o=qe({...this.renderer.toJSON(),variableName:n}),c=Ve(s,n);this.symbolizer?(this.symbolizer.rendererJSON=o,this.symbolizer.rasterInfo=c):this.symbolizer=new yi({rendererJSON:o,rasterInfo:c});const u=this.symbolizer.bind();if(u.success){if(t==="auto"){const{colormap:d}=this.raster.rasterInfo,h=this.renderer;if(d!=null&&h.type==="raster-colormap"){const f=Xe(this.raster.rasterInfo);JSON.stringify(f)!==JSON.stringify(h)&&this._configDefaultRenderer("override")}else if(h.type==="raster-stretch"){const f=this.bandIds?.length,y=h.customStatistics?.length;!h.dynamicRangeAdjustment&&y&&f&&y!==f&&this._configDefaultRenderer("override")}}}else ne.getLogger(this).warn("imagery-tile-mixin",u.error||"The given renderer is not supported by the layer."),t==="auto"&&this._configDefaultRenderer("override")}};function r(t){if(!t.raster||!t.serviceRasterInfo)throw new C("imagery-tile","no raster")}return w([b({clonable:!1})],e.prototype,"_cachedRendererJson",void 0),w([b({clonable:!1})],e.prototype,"_cachedRasterFunctionJson",void 0),w([b({clonable:!1})],e.prototype,"_compatibleFullExtent",void 0),w([b({clonable:!1})],e.prototype,"_isConstructedFromFunctionRaster",void 0),w([b({clonable:!1})],e.prototype,"_rasterJobHandler",void 0),w([b({type:[St],json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.bandIds?.join(",")!=="0,1,2"}}}}})],e.prototype,"bandIds",void 0),w([b({json:{origins:{service:{read:{source:"copyrightText"}}}}})],e.prototype,"copyright",void 0),w([b({json:{read:!1}})],e.prototype,"fullExtent",null),w([b({json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.interpolation!=="bilinear"}}}}}),Tt(Kt)],e.prototype,"interpolation",void 0),w([b()],e.prototype,"ioConfig",void 0),w([b({type:[Ae],json:{write:!0}})],e.prototype,"multidimensionalDefinition",null),w([b({type:Qt,json:{write:!0}})],e.prototype,"multidimensionalSubset",void 0),w([b()],e.prototype,"raster",void 0),w([b({type:$e,json:{name:"renderingRule",write:!0}})],e.prototype,"rasterFunction",null),w([b({readOnly:!0})],e.prototype,"rasterInfo",null),w([b()],e.prototype,"serviceRasterInfo",void 0),w([b()],e.prototype,"sourceJSON",void 0),w([b({readOnly:!0,type:A,json:{read:!1}})],e.prototype,"spatialReference",void 0),w([b({type:ee})],e.prototype,"tileInfo",void 0),w([b(at)],e.prototype,"url",null),w([b()],e.prototype,"renderer",null),w([b({types:Zt,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const t=this.renderer?.type==="raster-stretch"&&this.renderer.stretchType==="none"&&!this.renderer.useGamma;return{enabled:!this.loaded||this.raster.tileType==="Raster"||!t}}},origins:{"web-scene":{types:ei,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:t=>({enabled:t&&t.type!=="vector-field"&&t.type!=="flow"})}}}}})],e.prototype,"internalRenderer",null),w([_t("internalRenderer")],e.prototype,"readRenderer",null),w([b({clonable:!1})],e.prototype,"symbolizer",void 0),e=w([Y("esri.layers.mixins.ImageryTileMixin")],e),e};function yt(i){return["x","e","east","long","longitude"].includes(i.toLowerCase())}function gt(i){return["y","n","west","lat","latitude"].includes(i.toLowerCase())}function is(i){const{axes:e}=i.domain,r=Object.keys(e),t=[],s=[];let a=-1,n=-1,l=[];for(let x=0;x<r.length;x++){const R=r[x];yt(R)?a=x:gt(R)&&(n=x);const I=e[R],S=[];if("values"in I){I.values.forEach(v=>S.push(typeof v=="string"?new Date(v).getTime():v));const T=S[1]-S[0];t.push([S[0]-.5*T,S[S.length-1]+.5*T]),s.push(T)}else{const{start:T,stop:v,num:k}=I,_=(v-T)/(k-1);t.push([T-.5*_,v+.5*_]),s.push(_);for(let P=0;P<k;P++)S.push(T+_*P)}l.push({name:R,values:S,extent:[S[0],S[S.length-1]]})}a>-1&&n===-1?n=a===0?1:0:n>-1&&a===-1?a=n===0?1:0:n===-1&&a===-1&&(a=0,n=1),l=l.filter((x,R)=>!(R===a||R===n));const{referencing:o}=i.domain,c=o.find(x=>x.coordinates.includes(r[a])).system.id,u=c?.slice(c.lastIndexOf("/")+1),d=u==null||u==="CRS84"?4326:Number(u),h=new A({wkid:d}),[f,y]=t[a],[g,m]=t[n],p=new z({xmin:f,xmax:y,ymin:g,ymax:m,spatialReference:h});return{width:Math.round(p.width/s[a]),height:Math.round(p.height/s[n]),extent:p,dimensions:l}}function Fe(i){const e=Ot();return e?i[e]??Object.values(i)[0]:Object.values(i)[0]}function ke(){return Math.round(255*Math.random())}function ss(i){const e={},{parameters:r}=i;if(!r)return e;for(const[t,s]of Object.entries(r)){const{type:a,description:n,unit:l,categoryEncoding:o,observedProperty:c}=s;if(a==="Parameter"&&(e[t]={},n&&(e[t].description=Fe(n)),l&&(e[t].unit=l.label?Fe(l.label):null,e[t].symbol=l.symbol?.value),o)){const u=Object.entries(o).map((f,y)=>({OID:y,Value:Number(f[1]),ClassName:f[0].slice(f[0].lastIndexOf("/")+1),Count:1}));let d=!1;c?.categories?.length&&(c.categories.forEach(f=>{if(!f.id)return;const y=f.id.slice(f.id.lastIndexOf("/")+1),g=u.find(p=>p.ClassName===y);if(!g)return;const m=f.label?Fe(f.label):null;if(g.Label=m,f.preferredColor){const p=Ct.fromHex(f.preferredColor);p&&(d=!0,g.Red=p.r,g.Green=p.g,g.Blue=p.b)}}),d&&u.forEach(f=>{f.Red==null&&(f.Red=ke(),f.Green=ke(),f.Blue=ke())}));const h={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:u.map(f=>({attributes:f}))};d&&h.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[t].attributeTable=h}}return e}function rs(i){let e=Number.MAX_VALUE,r=-Number.MAX_VALUE;for(let t=0;t<i.length;t++){const s=i[t];s!=null&&(s<e&&(e=s),s>r&&(r=s))}return Di(e,r)}function ns(i,e,r){const t=i.map((o,c)=>({name:o,count:e[c]})).sort((o,c)=>o.name>c.name?-1:1),s=(a=1,o=>a*=o.count);var a;const n=[...t.slice(1),{name:"",count:1}].reverse().map(s).reverse();let l=0;for(let o=i.length-1;o>=0;o--)l+=n[t.findIndex(({name:c})=>c===i[o])]*(r%e[o]),r=Math.floor(r/e[o]);return l}function as(i){const{width:e,height:r,extent:t,dimensions:s}=is(i),{ranges:a}=i,n=Object.keys(a).sort((h,f)=>h<f?-1:1),l=[];for(let h=0;h<n.length;h++){const f=n[h];s?.length&&l.push({name:f,dimensions:s})}const o=ss(i);l.forEach(h=>o[h.name]&&Object.assign(h,o[h.name]));const c=l.length?{variables:l}:void 0,u=[];for(let h=0;h<n.length;h++){const f=n[h],{values:y,dataType:g,axisNames:m,shape:p}=a[f],x=p.length>2?h*p.slice(0,-2).reduce((k,_)=>k*_):0,R=m.slice(0,-2),I=p.slice(0,-2),S=g==="float"?"f32":rs(y),T=e*r,v=y.length/T;for(let k=0;k<v;k++){const _=we.createEmptyBand(S,T),P=new Uint8Array(T).fill(255);let F=!1;const M=k*T;for(let O=0;O<T;O++){const $=y[M+O];$==null?(P[O]=0,F=!0):_[O]=$}if(h===0||s?.length){const O=new we({width:e,height:r,mask:F?P:null,pixels:[_],pixelType:S});O.updateStatistics(),s?.length?u[ns(R,I,k)+x]=O:u.push(O)}else{const O=u[k];O.pixels.push(_),F?O.mask&&(O.mask=we.combineBandMasks([O.mask,P])):O.mask=F?P:null}}}const d=Object.values(o).find(h=>h.attributeTable)?.attributeTable;return{extent:t,pixelBlocks:u,multidimensionalInfo:c,attributeTable:d,bandNames:c?void 0:n}}let oe=class extends ae{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(i,e,r,t={}){if(!this._pixelBlockTiles){const{rasterInfo:a}=this,[n,l]=a.storageInfo.tileInfo.size,{sliceId:o}=t,{pixelBlocks:c}=this.source,u={pixelBlock:o==null?c[0]:c[o],useBilinear:a.dataType!=="thematic",tileSize:{width:n,height:l},level:i,row:e,col:r},d=this.rasterJobHandler?this.rasterJobHandler.clipTile(u,t):Bi(u);return Promise.resolve(d)}const s=this._pixelBlockTiles.get(`${i}/${e}/${r}`);return Promise.resolve(s)}async _open(i){const e=this.source,{pixelBlocks:r,attributeTable:t,statistics:s,histograms:a,name:n,nativeExtent:l,transform:o}=e,c=r[0],{width:u,height:d,pixelType:h}=c,f=e.extent??new z({xmin:-.5,ymin:.5,xmax:u-.5,ymax:d-.5,spatialReference:new A({wkid:3857})}),y=e.isPseudoSpatialReference??!e.extent,g={x:f.width/u,y:f.height/d},m={...e.keyProperties};t&&(m.DataType="Thematic");const p=new ve({width:u,height:d,pixelType:h,extent:f,nativeExtent:l,attributeTable:t,transform:o,pixelSize:g,spatialReference:f.spatialReference,bandCount:c.pixels.length,keyProperties:m,multidimensionalInfo:e.multidimensionalInfo,statistics:s,isPseudoSpatialReference:y,histograms:a});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(p),this.createRemoteDatasetStorageInfo(p,512,512),this._set("rasterInfo",p),this.updateTileInfo(),p.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,p.multidimensionalInfo):await this._buildInMemoryRaster(c,{width:512,height:512},i),p.multidimensionalInfo||(this.source=null),this.datasetName=n}async _buildInMemoryRaster(i,e,r){const{rasterInfo:t}=this,s=t.storageInfo.maximumPyramidLevel??0,a=t.dataType!=="thematic",n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:i,tileSize:e,maximumPyramidLevel:s,useBilinear:a},r):Promise.resolve(Ei(i,e,s,a)),l=t.statistics!=null,o=t.histograms!=null,c=this.ioConfig.skipStatistics||l?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:i},r):Promise.resolve(gi(i)),u=await ut([n,c]);if(!u[0].value&&u[1].value)throw new C("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=u[0].value,l||(t.statistics=u[1].value?.statistics),o||(t.histograms=u[1].value?.histograms)}async _buildMDimStats(i,e,r){for(let t=0;t<e.variables.length;t++){const s=e.variables[t];if(s.statistics)continue;const a=s.dimensions.map(c=>new Ae({variableName:s.name,dimensionName:c.name,values:[c.values?.[0]??c.extent?.[0]],isSlice:!0})),n=ft(a,e),l=n==null?null:i[n];if(l==null)continue;const o=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:l},r):Le(l);s.statistics=o.statistics,s.histograms||(s.histograms=o.histograms)}}};w([b({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),w([b()],oe.prototype,"source",void 0),w([b()],oe.prototype,"url",null),oe=w([Y("esri.layers.support.rasterDatasets.InMemoryRaster")],oe);const Ge=oe;let he=class extends ae{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(e,r,t,s={}){return this._inMemoryRaster.fetchRawTile(e,r,t,s)}async _open(e){const{extent:r,pixelBlocks:t,multidimensionalInfo:s,attributeTable:a,bandNames:n}=await this._fetchData(e),{statistics:l,histograms:o}=Le(t[0]),c=n?.map(f=>({BandName:f})),u={DataType:a?"Thematic":s?"Scientific":"Generic",BandProperties:c},d=new Ge({source:{extent:r,pixelBlocks:t,attributeTable:a?We.fromJSON(a):null,multidimensionalInfo:s,statistics:l,histograms:o,keyProperties:u,isPseudoSpatialReference:!1}});await d.open(),this._inMemoryRaster=d;const h=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",h.slice(0,h.indexOf("."))),this._set("rasterInfo",d.rasterInfo)}async _fetchData(e){const r=this.source??(await this.request(this.url,{signal:e?.signal})).data,t="imagery-tile-layer:open-coverage-json";if(r.type?.toLowerCase()!=="coverage"||r.domain?.domainType?.toLowerCase()!=="grid")throw new C(t,"Only coverage with Grid domain type is supported");if(!r.ranges)throw new C(t,"Missing ranges in the grid coverage data");if(!r.domain.referencing?.length)throw new C(t,"Missing domain referencing in the grid coverage data");const s=Object.values(r.ranges);for(let a=0;a<s.length;a++){const{axisNames:n,shape:l,type:o,values:c}=s[a];if(!(o.toLowerCase()==="ndarray"&&c?.length&&n?.length&&l?.length))throw new C(t,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(yt(n[n.length-1])&&gt(n[n.length-2])))throw new C(t,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return as(r)}};w([b({type:String,json:{write:!0}})],he.prototype,"datasetFormat",void 0),w([b({constructOnly:!0})],he.prototype,"source",void 0),he=w([Y("esri.layers.support.rasterDatasets.CovJSONRaster")],he);const os=he;function ue(i,e){if(!i||!e)return[];let r=e;e.includes("/")?(r=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const t=[];if(e){const a=ue(i,r);for(let n=0;n<a.length;n++)ue(a[n],e).forEach(l=>t.push(l));return t}const s=i.getElementsByTagNameNS("*",r);if(!s||s.length===0)return[];for(let a=0;a<s.length;a++)t.push(s[a]||s.item(a));return t}function j(i,e){if(!i||!e)return null;let r=e;e.includes("/")?(r=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const t=ue(i,r);return t.length>0?e?j(t[0],e):t[0]:null}function X(i,e=null){const r=e?j(i,e):i;let t;return r?(t=r.textContent||r.nodeValue,t?t.trim():null):null}function ls(i,e){const r=ue(i,e),t=[];let s;for(let a=0;a<r.length;a++)s=r[a].textContent||r[a].nodeValue,s&&(s=s.trim(),s!==""&&t.push(s));return t}function ge(i,e){return ls(i,e).map(r=>Number(r))}function re(i,e){const r=X(i,e);return Number(r)}function Ce(i,e){const r=i?.nodeName?.toLowerCase(),t=e.toLowerCase();return r.slice(r.lastIndexOf(":")+1)===t}function nt(i,e){if(!i||!e)return null;const r=[];for(let t=0;t<i.length;t++)r.push(i[t]),r.push(e[t]);return r}function cs(i){const e=j(i,"GeodataXform"),r=Se(re(e,"SpatialReference/WKID")||X(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:r,transform:null};const t=re(e,"PolynomialOrder")??1,s=ge(e,"CoeffX/Double"),a=ge(e,"CoeffY/Double"),n=ge(e,"InverseCoeffX/Double"),l=ge(e,"InverseCoeffY/Double"),o=nt(s,a),c=nt(n,l);return{spatialReference:r,transform:o&&c&&o.length&&c.length?new ze({spatialReference:r,polynomialOrder:t,forwardCoefficients:o,inverseCoefficients:c}):null}}function us(i){const e=re(i,"NoDataValue"),r=j(i,"Histograms/HistItem"),t=re(r,"HistMin"),s=re(r,"HistMax"),a=re(r,"BucketCount"),n=X(r,"HistCounts")?.split("|").map(h=>Number(h));let l,o,c,u;ue(i,"Metadata/MDI").forEach(h=>{const f=Number(h.textContent??h.nodeValue);switch(h.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=f;break;case"STATISTICS_MAXIMUM":o=f;break;case"STATISTICS_MEAN":c=f;break;case"STATISTICS_STDDEV":u=f}});const d=re(i,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n?.length&&t!=null&&s!=null?{min:t,max:s,size:a||n.length,counts:n}:null,sourceBandIndex:d,statistics:l!=null&&o!=null?{min:l,max:o,avg:c,stddev:u}:null}}function Se(i){if(!i)return null;let e=Number(i);if(!isNaN(e)&&e!==0)return new A({wkid:e});if(i=String(i).trim(),Pt(i))return new A({wkt2:i});const r=i.toUpperCase();if(r.startsWith("COMPD_CS")){if(!r.includes("VERTCS")||!r.includes("GEOGCS")&&!r.startsWith("PROJCS"))return null;const t=r.indexOf("VERTCS"),s=r.indexOf("PROJCS"),a=s>-1?s:r.indexOf("GEOGCS");if(a===-1)return null;const n=i.slice(a,i.lastIndexOf("]",t)+1).trim(),l=i.slice(t,i.lastIndexOf("]")).trim();e=Oe(n);const o=new A(e?{wkid:e}:{wkt:n}),c=Oe(l);return c&&(o.vcsWkid=c),o}return r.startsWith("GEOGCS")||r.startsWith("PROJCS")?(e=Oe(i),new A(e!==0?{wkid:e}:{wkt:i})):null}function Oe(i){const e=i.replaceAll("]","[").replaceAll('"',"").split("[").map(s=>s.trim()).filter(s=>s!==""),r=e[e.length-1].split(","),t=r[0]?.toLowerCase();if((t==="epsg"||t==="esri")&&i.endsWith('"]]')){const s=Number(r[1]);if(!isNaN(s)&&s!==0)return s}return 0}function je(i){if(i?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};i.documentElement.childNodes.forEach(t=>{if(t.nodeType===1){if(Ce(t,"SRS")){if(!e.spatialReference){const s=X(t);e.spatialReference=Se(s)}}else if(Ce(t,"Metadata"))if(t.getAttribute("domain")==="xml:ESRI"){const{spatialReference:s,transform:a}=cs(t);e.transform=a,e.spatialReference||(e.spatialReference=s)}else ue(t,"MDI").forEach(s=>e.metadata[s.getAttribute("key")]=X(s));else if(Ce(t,"PAMRasterBand")){const s=us(t);s.sourceBandIndex!=null&&e.rasterBands[s.sourceBandIndex]==null?e.rasterBands[s.sourceBandIndex]=s:e.rasterBands.push(s)}}});const r=e.rasterBands;if(r.length){const t=!!r[0].statistics;e.statistics=t?r.map(a=>a.statistics).filter(Me):null;const s=!!r[0].histogram;e.histograms=s?r.map(a=>a.histogram).filter(Me):null}return e}let be=class extends ae{fetchRawTile(i,e,r,t={}){return this._inMemoryRaster.fetchRawTile(i,e,r,t)}async _open(i){const e=await this._fetchData(i);let{spatialReference:r,statistics:t,histograms:s,transform:a}=await this._fetchAuxiliaryData(i);const n=!r;n&&(r=new A({wkid:3857})),s?.length&&t==null&&(t=He(s));const{width:l,height:o}=e;let c=new z({xmin:-.5,ymin:.5-o,xmax:l-.5,ymax:.5,spatialReference:r});const u=a?a.forwardTransform(c):c;let d=!0;if(a){const f=a.forwardCoefficients;d=f&&f[1]===0&&f[2]===0,d&&(a=null,c=u)}const h=new Ge({source:{extent:u,nativeExtent:c,transform:a,pixelBlocks:[e],statistics:t,histograms:s,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(h.ioConfig.skipMapInfo=!0),await h.open(),h.source=null,this._set("rasterInfo",h.rasterInfo),this._inMemoryRaster=h}async _fetchData(i){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:i?.signal}),r=xi(e).toUpperCase();if(r!=="JPG"&&r!=="PNG"&&r!=="GIF"&&r!=="BMP")throw new C("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",r);const t=r.toLowerCase(),s=t==="gif"||t==="bmp"||!Mt("ios"),a=await this.decodePixelBlock(e,{format:t,useCanvas:s,hasNoZlibMask:!0});if(a==null)throw new C("image-aux-raster:open","the data cannot be decoded");return a}async _fetchAuxiliaryData(i){const e=i?.signal,{skipExtensions:r=[],skipMapInfo:t}=this.ioConfig,s=t||r.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),a=this.datasetFormat,n=a==="JPG"?"jgw":a==="PNG"?"pgw":a==="BMP"?"bpw":null,l=n&&r.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),o=await ut([s,l]);if(e?.aborted)throw $t();const c=je(o[0].value?.data);if(!c.transform){const u=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(d=>Number(d)):null;c.transform=u?.length===6?new ze({forwardCoefficients:[u[4],u[5],u[0],-u[1],u[2],-u[3]]}):null}return c}};w([b({type:String,json:{write:!0}})],be.prototype,"datasetFormat",void 0),be=w([Y("esri.layers.support.rasterDatasets.ImageAuxRaster")],be);const xe=be;let fe=class extends ae{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(i,e,r,t={}){const{storageInfo:s,extent:a}=this.rasterInfo,{transposeInfo:n}=s,l=n!=null&&!!t.transposedVariableName;if(this._slices&&!l&&t.sliceId==null)return null;const o=l?0:s.maximumPyramidLevel-i+this._levelOffset,c=`${this.url}/tile/${o}/${e}/${r}`,u=this._slices?l?{variable:t.transposedVariableName}:{sliceId:t.sliceId||0}:null,{data:d}=await this.request(c,{query:u,responseType:"array-buffer",signal:t.signal});if(!d)return null;const h=l?n.tileSize:s.tileInfo.size,f=await this.decodePixelBlock(d,{width:h[0],height:h[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:l,noDataValue:this.rasterInfo.noDataValue});if(f==null)return null;const y=s.blockBoundary[i];if(s.compression!=="jpg"||r>y.minCol&&r<y.maxCol&&e>y.minRow&&e<y.maxRow)return f;const{origin:g,blockWidth:m,blockHeight:p}=s,{x,y:R}=this.getPyramidPixelSize(i),I=Math.round((a.xmin-g.x)/x)%m,S=Math.round((a.xmax-g.x)/x)%m||m,T=Math.round((g.y-a.ymax)/R)%p,v=Math.round((g.y-a.ymin)/R)%p||p,k=r===y.minCol?I:0,_=e===y.minRow?T:0,P=r===y.maxCol?S:m,F=e===y.maxRow?v:p;return Ji(f,{x:k,y:_},{width:P-k,height:F-_}),f}getSliceIndex(i){if(!this._slices||i==null||i.length===0)return null;const e=i;for(let r=0;r<this._slices.length;r++){const t=this._slices[r].multidimensionalDefinition;if(t.length===e.length&&!t.some(s=>{const a=e.find(n=>s.variableName===n.variableName&&n.dimensionName===s.dimensionName);return a?(Array.isArray(s.values[0])?`${s.values[0][0]}-${s.values[0][1]}`:s.values[0])!==(Array.isArray(a.values[0])?`${a.values[0][0]}-${a.values[0][1]}`:a.values[0]):!0}))return r}return null}async fetchVariableStatisticsHistograms(i,e){const r=this.request(this.url+"/statistics",{query:{variable:i,f:"json"},signal:e}).then(a=>a.data?.statistics),t=this.request(this.url+"/histograms",{query:{variable:i,f:"json"},signal:e}).then(a=>a.data?.histograms),s=await Promise.all([r,t]);return s[0]&&s[0].forEach(a=>{a.avg=a.mean,a.stddev=a.standardDeviation}),s[1]?.[0]?.counts?.length||(s[1]=null),{statistics:s[0]||null,histograms:s[1]||null}}async computeBestPyramidLevelForLocation(i,e={}){if(!this._tilemapCache)return 0;let r=this.identifyPixelLocation(i,0,e.datumTransformation);if(r===null)return null;let t=0;const{maximumPyramidLevel:s}=this.rasterInfo.storageInfo;let a=s-t+this._levelOffset;const n=r.srcLocation;for(;a>=0;){try{if(await this._tilemapCache.fetchAvailability(a,r.row,r.col,e)==="available")break}catch{}if(a--,t++,r=this.identifyPixelLocation(n,t,e.datumTransformation),r===null)return null}return a===-1||r==null?null:t}async _open(i){const e=i?.signal,r=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});r.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const t=r.data;if(this.sourceJSON=t,!t)throw new C("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!t.tileInfo)throw new C("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const s=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=t.cacheType,this.tileType==null&&(s.includes(t.tileInfo.format.toLowerCase())?this.tileType="Map":t.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=t.name?.slice(t.name.indexOf("/")+1)??"";const a=await this._fetchRasterInfo({signal:e});if(a==null)throw new C("image-server-raster:open","cannot initialize image service");li(a,t);const n=this.tileType==="Map"?hs(t.tileInfo,t):ee.fromJSON(t.tileInfo);Nt(n);const[l,o]=this._computeMinMaxLOD(a,n),{extent:c,pixelSize:u}=a,d=.5/a.width*u.x,h=Math.max(u.x,u.y),{lods:f}=n;(this.tileType!=="Map"&&t.maxScale!==0||Math.abs(u.x-u.y)>d||!f.some(v=>Math.abs(v.resolution-h)<d))&&(u.x=u.y=l.resolution,a.width=Math.ceil((c.xmax-c.xmin)/u.x-.1),a.height=Math.ceil((c.ymax-c.ymin)/u.y-.1));const y=l.level-o.level,[g,m]=n.size,p=[],x=[];f.forEach((v,k)=>{v.level>=o.level&&v.level<=l.level&&p.push({x:v.resolution,y:v.resolution}),k<f.length-1&&x.push(Math.round(10*v.resolution/f[k+1].resolution)/10)}),p.sort((v,k)=>v.x-k.x);const R=this.computeBlockBoundary(c,g,m,n.origin,p,y),I=p.length>1?p.slice(1):null;let S;t.transposeInfo&&(S={tileSize:[t.transposeInfo.rows,t.transposeInfo.cols],packetSize:a.keyProperties?._yxs.PacketSize??0});const T=x.length<=1||x.length>=3&&x.slice(0,-1).every(v=>v===x[0])?x[0]??2:Math.round(10/(o.resolution/l.resolution)**(-1/y))/10;if(a.storageInfo=new Re({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:I,pyramidScalingFactor:T,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:y,tileInfo:n,transposeInfo:S,blockBoundary:R}),fs(a),this._set("rasterInfo",a),t.capabilities.toLowerCase().includes("tilemap")){const v={tileInfo:a.storageInfo.tileInfo,parsedUrl:Dt(this.url),url:this.url,tileServers:[]};this._tilemapCache=new qi({layer:v})}}async _fetchRasterInfo(i){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,l=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),o=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),c=A.fromJSON(e.spatialReference||n.spatialReference),u=new J({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:c});return new ve({width:l,height:o,bandCount:3,extent:z.fromJSON(n),spatialReference:c,pixelSize:u,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:r}=i,t=ci(this.url,this.sourceJSON,{signal:r,query:this.ioConfig.customFetchParameters}),s=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:r}).then(n=>n.data?.slices).catch(()=>null):null,a=await Promise.all([t,s]);return this._slices=a[1],a[0]}_fixScaleInServiceInfo(){const{sourceJSON:i}=this;i.minScale&&i.minScale<0&&(i.minScale=0),i.maxScale&&i.maxScale<0&&(i.maxScale=0)}_computeMinMaxLOD(i,e){const{pixelSize:r}=i,t=.5/i.width*r.x,{lods:s}=e,a=e.lodAt(Math.max.apply(null,s.map(h=>h.level))),n=e.lodAt(Math.min.apply(null,s.map(h=>h.level))),{tileType:l}=this;if(l==="Map")return this._levelOffset=s[0].level,[a,n];if(l==="Raster")return[s.find(h=>h.resolution===r.x)??a,n];const{minScale:o,maxScale:c}=this.sourceJSON;let u=a;c>0&&(u=s.find(h=>Math.abs(h.scale-c)<t),u||(u=s.filter(h=>h.scale>c).sort((h,f)=>h.scale>f.scale?1:-1)[0]??a));let d=n;return o>0&&(d=s.find(h=>Math.abs(h.scale-o)<t)??n,this._levelOffset=d.level-n.level),[u,d]}};function hs(i,e){if(!i)return null;const{minScale:r,maxScale:t,minLOD:s,maxLOD:a}=e;if(s!=null&&a!=null)return ee.fromJSON({...i,lods:i.lods.filter(({level:n})=>n!=null&&n>=s&&n<=a)});if(r!==0&&t!==0){const n=c=>Math.round(1e4*c)/1e4,l=r?n(r):1/0,o=t?n(t):-1/0;return ee.fromJSON({...i,lods:i.lods.filter(c=>{const u=n(c.scale);return u<=l&&u>=o})})}return ee.fromJSON(i)}function fs(i){const{extent:e,spatialReference:r}=i;e.xmin>-1&&e.xmax>181&&r?.wkid&&r.isGeographic&&(i.nativeExtent=i.extent,i.transform=new Gi,i.extent=i.transform.forwardTransform(e))}w([b({type:String,json:{write:!0}})],fe.prototype,"datasetFormat",void 0),w([b()],fe.prototype,"tileType",void 0),fe=w([Y("esri.layers.support.rasterDatasets.ImageServerRaster")],fe);const ds=fe,V=new Map;V.set("Int8","s8"),V.set("UInt8","u8"),V.set("Int16","s16"),V.set("UInt16","u16"),V.set("Int32","s32"),V.set("UInt32","u32"),V.set("Float32","f32"),V.set("Float64","f32"),V.set("Double64","f32");const Z=new Map;Z.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),Z.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),Z.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),Z.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let le=class extends ae{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(i,e,r,t={}){const{blockWidth:s,blockHeight:a,blockBoundary:n}=this.rasterInfo.storageInfo,l=n[i];if(!l||l.maxRow<e||l.maxCol<r||l.minRow>e||l.minCol>r)return null;const{bandCount:o,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:d,actualTileHeight:h}=this._getTileLocation(i,e,r);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const F=new Uint8Array(s*a);return new we({width:s,height:a,pixels:void 0,mask:F,validPixelCount:0})}const{bandIds:f}=this.ioConfig,y=this._getBandSegmentCount(),g=[];let m=0;for(m=0;m<y;m++)f&&!f.includes(m)||g.push(this.request(this._files.data,{range:{from:u[m].from,to:u[m].to},responseType:"array-buffer",signal:t.signal}));const p=await Promise.all(g),x=p.map(F=>F.data.byteLength).reduce((F,M)=>F+M),R=new Uint8Array(x),I=[];let S=0;for(m=0;m<y;m++)I.push(S),R.set(new Uint8Array(p[m].data),S),S+=p[m].data.byteLength;const T=Z.get(this.rasterInfo.storageInfo.compression).decoderFormat,v=await this.decodePixelBlock(R.buffer,{width:s,height:a,format:T,planes:f?.length||o,offsets:I,pixelType:c});if(v==null)return null;let{noDataValue:k}=this.rasterInfo;if(k!=null&&T!=="lerc"&&!v.mask&&(k=k[0],k!=null)){const F=v.width*v.height,M=new Uint8Array(F);if(Math.abs(k)>1e24)for(m=0;m<F;m++)Math.abs((v.pixels[0][m]-k)/k)>1e-6&&(M[m]=1);else for(m=0;m<F;m++)v.pixels[0][m]!==k&&(M[m]=1);v.mask=M}let _=0,P=0;if(d!==s||h!==a){let F=v.mask;if(F)for(m=0;m<a;m++)if(P=m*s,m<h)for(_=d;_<s;_++)F[P+_]=0;else for(_=0;_<s;_++)F[P+_]=0;else for(F=new Uint8Array(s*a),v.mask=F,m=0;m<h;m++)for(P=m*s,_=0;_<d;_++)F[P+_]=1}return v}async _open(i){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=i?i.signal:null,r=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:t,files:s}=this._parseHeader(r.data),{skipMapInfo:a,skipExtensions:n=[]}=this.ioConfig;if(!n.includes("aux.xml")&&!a){const p=await this._fetchAuxiliaryData(i);p!=null&&(t.statistics=p.statistics??t.statistics,t.histograms=p.histograms,p.histograms&&t.statistics==null&&(t.statistics=He(p.histograms)))}a&&this.updateImageSpaceRasterInfo(t),this._set("rasterInfo",t),this._files=s;const l=await this.request(s.index,{responseType:"array-buffer",signal:e});this._storageIndex=ms(l.data);const{blockWidth:o,blockHeight:c}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:d,height:h}=this.rasterInfo,f=[],y=this._getBandSegmentCount();let g=0,m=-1;for(;g<this._storageIndex.length;){m++;const p=Math.ceil(d/o/u**m)-1,x=Math.ceil(h/c/u**m)-1;g+=(p+1)*(x+1)*y*4,f.push({maxRow:x,maxCol:p,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=f,m>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=m),this.updateTileInfo()}_getBandSegmentCount(){return Z.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(i,e,r){const{blockWidth:t,blockHeight:s,pyramidScalingFactor:a}=this.rasterInfo.storageInfo,{width:n,height:l}=this.rasterInfo,o=this._getBandSegmentCount();let c,u,d,h=0,f=0;for(d=0;d<i;d++)f=a**d,c=Math.ceil(n/t/f),u=Math.ceil(l/s/f),h+=c*u;f=a**i,c=Math.ceil(n/t/f),u=Math.ceil(l/s/f),h+=e*c+r,h*=4*o;const y=this._storageIndex.subarray(h,h+4*o);let g=0,m=0;const p=[];for(let x=0;x<o;x++)g=y[4*x]*2**32+y[4*x+1],m=g+y[4*x+2]*2**32+y[4*x+3],p.push({from:g,to:m});return{ranges:p,actualTileWidth:r<c-1?t:Math.ceil(n/f)-t*(c-1),actualTileHeight:e<u-1?s:Math.ceil(l/f)-s*(u-1)}}_parseHeader(i){const e=j(i,"MRF_META/Raster");if(!e)throw new C("mrf:open","not a valid MRF format");const r=j(e,"Size"),t=parseInt(r.getAttribute("x"),10),s=parseInt(r.getAttribute("y"),10),a=parseInt(r.getAttribute("c"),10),n=(X(e,"Compression")||"none").toLowerCase();if(!Z.has(n))throw new C("mrf:open","currently does not support compression "+n);const l=X(e,"DataType")||"UInt8",o=V.get(l);if(o==null)throw new C("mrf:open","currently does not support pixel type "+l);const c=j(e,"PageSize"),u=parseInt(c.getAttribute("x"),10),d=parseInt(c.getAttribute("y"),10),h=j(e,"DataValues");let f,y;if(h&&(y=h.getAttribute("NoData"),y!=null&&(f=y.trim().split(" ").map(F=>parseFloat(F)))),j(i,"MRF_META/CachedSource"))throw new C("mrf:open","currently does not support MRF referencing other data files");const g=j(i,"MRF_META/GeoTags"),m=j(g,"BoundingBox");let p,x=!1;if(m!=null){const F=parseFloat(m.getAttribute("minx")),M=parseFloat(m.getAttribute("miny")),O=parseFloat(m.getAttribute("maxx")),$=parseFloat(m.getAttribute("maxy")),N=X(g,"Projection")||"";let E=A.WGS84;if(N!=="LOCAL_CS[]")if(N.toLowerCase().startsWith("epsg:")){const H=Number(N.slice(5));isNaN(H)||H===0||(E=new A({wkid:H}))}else E=Se(N)??A.WGS84;else x=!0,E=new A({wkid:3857});p=new z(F,M,O,$),p.spatialReference=E}else x=!0,p=new z({xmin:-.5,ymin:.5-s,xmax:t-.5,ymax:.5,spatialReference:new A({wkid:3857})});const R=j(i,"MRF_META/Rsets"),I=parseInt(R?.getAttribute("scale")||"2",10),S=p.spatialReference,T=new Re({origin:new J({x:p.xmin,y:p.ymax,spatialReference:S}),blockWidth:u,blockHeight:d,pyramidBlockWidth:u,pyramidBlockHeight:d,compression:n,pyramidScalingFactor:I}),v=new J({x:p.width/t,y:p.height/s,spatialReference:S}),k=new ve({width:t,height:s,extent:p,isPseudoSpatialReference:x,spatialReference:S,bandCount:a,pixelType:o,pixelSize:v,noDataValue:f,storageInfo:T}),_=X(i,"datafile"),P=X(i,"IndexFile");return{rasterInfo:k,files:{mrf:this.url,index:P||this.url.replace(".mrf",".idx"),data:_||this.url.replace(".mrf",Z.get(n).blobExtension)}}}async _fetchAuxiliaryData(i){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:i?.signal});return je(e)}catch{return null}}};function ms(i){if(i.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,r,t,s,a,n;if(wi){for(r=new Uint8Array(i),s=new ArrayBuffer(i.byteLength),t=new Uint8Array(s),a=0;a<i.byteLength/4;a++)for(n=0;n<4;n++)t[4*a+n]=r[4*a+3-n];e=new Uint32Array(s)}else e=new Uint32Array(i);return e}w([b()],le.prototype,"_files",void 0),w([b()],le.prototype,"_storageIndex",void 0),w([b({type:String,json:{write:!0}})],le.prototype,"datasetFormat",void 0),le=w([Y("esri.layers.support.rasterDatasets.MRFRaster")],le);const ps=le;function ys(i){const e=i.fields,r=i.records,t=e.some(c=>c.name.toLowerCase()==="oid")?"OBJECTID":"OID",s=[{name:t,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(c=>({name:c.name,type:"esriFieldType"+c.typeName,alias:c.name}))),a=s.map(c=>c.name),n=[];let l=0,o=0;return r.forEach(c=>{const u={};for(u[t]=l++,o=1;o<a.length;o++)u[a[o]]=c[o-1];n.push({attributes:u})}),{displayFieldName:"",fields:s,features:n}}class gs{static get supportedVersions(){return[5]}static parse(e){const r=new DataView(e),t=3&r.getUint8(0);if(t!==3)return{header:{version:t},recordSet:null};const s=r.getUint32(4,!0),a=r.getUint16(8,!0),n=r.getUint16(10,!0),l={version:t,recordCount:s,headerByteCount:a,recordByteCount:n};let o=32;const c=[],u=[];let d;if(t===3){for(;r.getUint8(o)!==13;)d=String.fromCharCode(r.getUint8(o+11)).trim(),c.push({name:Qe(new Uint8Array(e,o,11)),type:d,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(d)],length:r.getUint8(o+16)}),o+=32;if(o+=1,c.length>0)for(;u.length<s&&e.byteLength-o>n;){const h=[];r.getUint8(o)===32?(o+=1,c.forEach(f=>{if(f.type==="C")h.push(Qe(new Uint8Array(e,o,f.length)).trim());else if(f.type==="N")h.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim(),10));else if(f.type==="F")h.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim()));else if(f.type==="D"){const y=String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim();h.push(new Date(parseInt(y.slice(0,4),10),parseInt(y.slice(4,6),10)-1,parseInt(y.slice(6,8),10)))}o+=f.length}),u.push(h)):o+=n}}return{header:l,fields:c,records:u,recordSet:ys({fields:c,records:u})}}}const Ee=(i,e)=>i.get(e)?.values,de=(i,e)=>i.get(e)?.values?.[0];let se=class extends ae{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async fetchRawTile(i,e,r,t={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(i,e,r))return null;const s=await this._fetchRawTiffTile(i,e,r,!1,t);if(s!=null&&this._headerInfo.hasMaskBand){const a=await this._fetchRawTiffTile(i,e,r,!0,t);a!=null&&a.pixels[0]instanceof Uint8Array&&(s.mask=a.pixels[0])}return s}async _open(i){const e=i?i.signal:null,{data:r}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!r)throw new C("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:t,firstIFDPos:s,isBigTiff:a}=Ii(r),n=[];await this._readIFDs(n,r,t,s,0,a?8:4,e);const{imageInfo:l,rasterInfo:o}=xs(n),c=bi(n),u=Ri(n);if(this._headerInfo={littleEndian:t,isBigTiff:a,ifds:n,pyramidIFDs:c,maskIFDs:u,...l},this._set("rasterInfo",o),!l.isSupported)throw new C("tiffraster:open","this tiff is not supported: "+l.message);if(!l.tileWidth)throw new C("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");o.isPseudoSpatialReference&&ne.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const d=n[0].get("PREDICTOR")?.values?.[0];if(n[0].get("SAMPLEFORMAT")?.values?.[0]===3&&d===2)throw new C("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:f,skipExtensions:y=[]}=this.ioConfig;if(!y.includes("aux.xml")&&!f){const g=await this._fetchAuxiliaryMetaData(i);g!=null&&ws(g,o)}y.includes("vat.dbf")||o.bandCount!==1||o.pixelType!=="u8"||f||(o.attributeTable=await this._fetchAuxiliaryTable(i),o.attributeTable!=null&&(o.keyProperties.DataType="thematic")),f&&this.updateImageSpaceRasterInfo(o),this.updateTileInfo()}async _readIFDs(i,e,r,t,s,a=4,n){if(!t)return null;(t>=e.byteLength||t<0)&&(e=(await this.request(this.url,{range:{from:t+s,to:t+s+this._bufferSize},responseType:"array-buffer",signal:n})).data,s=t+s,t=0);const l=await this._readIFD(e,r,t,s,me.tiffTags,a,n);if(i.push(l.ifd),!l.nextIFD)return null;await this._readIFDs(i,e,r,l.nextIFD-s,s,a,n)}async _readIFD(i,e,r,t,s=me.tiffTags,a=4,n){if(!i)return null;const l=vi(i,e,r,t,s,a);if(l.success){const o=[];if(l.ifd?.forEach(c=>{c.values||o.push(c)}),o.length>0){const c=o.map(d=>d.offlineOffsetSize).filter(Me),u=Math.min.apply(null,c.map(d=>d[0]));if(Math.min.apply(null,c.map(d=>d[0]+d[1]))-u<=this._bufferSize){const{data:d}=await this.request(this.url,{range:{from:u,to:u+this._bufferSize},responseType:"array-buffer",signal:n});i=d,t=u,o.forEach(h=>Si(i,e,h,t))}}if(l.ifd?.has("GEOKEYDIRECTORY")){const c=l.ifd.get("GEOKEYDIRECTORY"),u=c?.values;if(u&&u.length>4){const d=u[0]+"."+u[1]+"."+u[2],h=await this._readIFD(i,e,c.valueOffset+6-t,t,me.geoKeys,2,n);c.data=h.ifd,c.data&&c.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[d]})}}return l}if(l.requiredBufferSize&&l.requiredBufferSize!==i.byteLength)return(i=(await this.request(this.url,{range:{from:t,to:t+l.requiredBufferSize+4},responseType:"array-buffer",signal:n})).data).byteLength<l.requiredBufferSize?null:this._readIFD(i,e,0,t,me.tiffTags,4,n)}async _fetchRawTiffTile(i,e,r,t,s={}){const a=this._getTileLocation(i,e,r,t);if(!a)return null;const{ranges:n,actualTileWidth:l,actualTileHeight:o,ifd:c}=a,u=n.map(T=>this.request(this.url,{range:T,responseType:"array-buffer",signal:s.signal})),d=await Promise.all(u),h=d.map(T=>T.data.byteLength).reduce((T,v)=>T+v),f=d.length===1?d[0].data:new ArrayBuffer(h),y=[0],g=[0];if(d.length>1){const T=new Uint8Array(f);for(let v=0,k=0;v<d.length;v++){const _=d[v].data;T.set(new Uint8Array(_),k),y[v]=k,k+=_.byteLength,g[v]=_.byteLength}}const{blockWidth:m,blockHeight:p}=this.getBlockWidthHeight(i),x=await this.decodePixelBlock(f,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:y,sizes:g},width:m,height:p,planes:null,pixelType:null});if(x==null)return null;let R,I,S;if(l!==m||o!==p){let T=x.mask;if(T)for(R=0;R<p;R++)if(S=R*m,R<o)for(I=l;I<m;I++)T[S+I]=0;else for(I=0;I<m;I++)T[S+I]=0;else for(T=new Uint8Array(m*p),x.mask=T,R=0;R<o;R++)for(S=R*m,I=0;I<l;I++)T[S+I]=1}return x}_getTileLocation(i,e,r,t=!1){const{firstPyramidLevel:s,blockBoundary:a}=this.rasterInfo.storageInfo,n=i===0?0:i-(s-1),{_headerInfo:l}=this;if(!l)return null;const o=t?l.maskIFDs[n]:n===0?l?.ifds[0]:l?.pyramidIFDs[n-1];if(!o)return null;const c=Ti(o,l),u=Ee(o,"TILEOFFSETS");if(u===void 0)return null;const d=Ee(o,"TILEBYTECOUNTS"),{minRow:h,minCol:f,maxRow:y,maxCol:g}=a[n];if(e>y||r>g||e<h||r<f)return null;const m=de(o,"IMAGEWIDTH"),p=de(o,"IMAGELENGTH"),x=de(o,"TILEWIDTH"),R=de(o,"TILELENGTH"),I=[];if(c){const{bandCount:S}=this.rasterInfo;for(let T=0;T<S;T++){const v=T*(y+1)*(g+1)+e*(g+1)+r;I[T]={from:u[v],to:u[v]+d[v]-1}}}else{const S=e*(g+1)+r;I.push({from:u[S],to:u[S]+d[S]-1})}for(let S=0;S<I.length;S++)if(I[S].from==null||!I[S].to||I[S].to<0)return null;return{ranges:I,ifd:o,actualTileWidth:r===g&&m%x||x,actualTileHeight:e===y&&p%R||R}}async _fetchAuxiliaryMetaData(i){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:i?.signal});return je(e)}catch{return null}}async _fetchAuxiliaryTable(i){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:i?.signal}),r=gs.parse(e);return r?.recordSet?We.fromJSON(r.recordSet):null}catch{return null}}};function xs(i){const e=_i(i),{width:r,height:t,tileWidth:s,tileHeight:a,planes:n,pixelType:l,compression:o,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidBlockWidth:d,pyramidBlockHeight:h,pyramidResolutions:f,tileBoundary:y,affine:g,metadata:m}=e,p=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let x=Se(p),R=!!e.isPseudoGeographic;x==null&&(R=!0,x=new A({wkid:3857}));const I=new z({...e.extent,spatialReference:x}),S=new J(I?{x:I.xmin,y:I.ymax,spatialReference:x}:{x:0,y:0}),T=new Re({blockWidth:s,blockHeight:a,pyramidBlockWidth:d,pyramidBlockHeight:h,compression:o,origin:S,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidResolutions:f,blockBoundary:y}),v=new J({x:(I.xmax-I.xmin)/r,y:(I.ymax-I.ymin)/t,spatialReference:x}),k=m?{BandProperties:m.bandProperties,DataType:m.dataType}:{};let _=null;const P=de(i[0],"PHOTOMETRICINTERPRETATION"),F=Ee(i[0],"COLORMAP");if(P<=3&&F?.length>3&&F.length%3==0){_=[];const O=F.length/3;for(let $=0;$<O;$++)_.push([$,F[$]>>>8,F[$+O]>>>8,F[$+2*O]>>>8])}const M=new ve({width:r,height:t,bandCount:n,pixelType:l,pixelSize:v,storageInfo:T,spatialReference:x,isPseudoSpatialReference:R,keyProperties:k,extent:I,colormap:_,statistics:m?m.statistics:null});if(g?.length&&(M.nativeExtent=new z({xmin:-.5,ymin:.5-t,xmax:r-.5,ymax:.5,spatialReference:x}),M.transform=new ze({polynomialOrder:1,forwardCoefficients:[g[2]+g[0]/2,g[5]-g[3]/2,g[0],g[3],-g[1],-g[4]]}),M.extent=M.transform.forwardTransform(M.nativeExtent),M.pixelSize=new J({x:(I.xmax-I.xmin)/r,y:(I.ymax-I.ymin)/t,spatialReference:x}),T.origin.x=-.5,T.origin.y=.5),f){const{x:O,y:$}=M.pixelSize;f.forEach(N=>{N.x*=O,N.y*=$})}return{imageInfo:e,rasterInfo:M}}function ws(i,e){if(e.statistics=i.statistics??e.statistics,e.histograms=i.histograms,i.histograms&&e.statistics==null&&(e.statistics=He(i.histograms)),i.transform&&e.transform==null){e.transform=i.transform,e.nativeExtent=e.extent;const r=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new J({x:(r.xmax-r.xmin)/e.width,y:(r.ymax-r.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=r}e.isPseudoSpatialReference&&i.spatialReference&&(e.spatialReference=i.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}w([b()],se.prototype,"_files",void 0),w([b()],se.prototype,"_headerInfo",void 0),w([b()],se.prototype,"_bufferSize",void 0),w([b({type:String,json:{write:!0}})],se.prototype,"datasetFormat",void 0),se=w([Y("esri.layers.support.rasterDatasets.TIFFRaster")],se);const Is=se,L=new Map;L.set("MRF",{desc:"Meta Raster Format",constructor:ps}),L.set("TIFF",{desc:"GeoTIFF",constructor:Is}),L.set("RasterTileServer",{desc:"Raster Tile Server",constructor:ds}),L.set("JPG",{desc:"JPG Raster Format",constructor:xe}),L.set("PNG",{desc:"PNG Raster Format",constructor:xe}),L.set("GIF",{desc:"GIF Raster Format",constructor:xe}),L.set("BMP",{desc:"BMP Raster Format",constructor:xe}),L.set("CovJSON",{desc:"COVJSON Raster Format",constructor:os}),L.set("MEMORY",{desc:"In Memory Raster Format",constructor:Ge});class Pe{static get supportedFormats(){const e=new Set;return L.forEach((r,t)=>e.add(t)),e}static async open(e){const{url:r,ioConfig:t,source:s,sourceJSON:a}=e;let n=e.datasetFormat??t?.datasetFormat;n==null&&(r.includes(".")?n=r.slice(r.lastIndexOf(".")+1).toUpperCase():s?.type?.toLowerCase()==="coverage"?n="CovJSON":s?.extent&&s.pixelblocks&&(n="MEMORY")),n==="OVR"||n==="TIF"?n="TIFF":n==="JPG"||n==="JPEG"||n==="JFIF"?n="JPG":n==="COVJSON"&&(n="CovJSON"),r.toLowerCase().includes("/imageserver")&&!r.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const l={url:r,source:s,sourceJSON:a,datasetFormat:n,ioConfig:t??{bandIds:null,sampling:null}};if(Object.keys(l).forEach(d=>{l[d]==null&&delete l[d]}),n){if(!this.supportedFormats.has(n))throw new C("rasterfactory:open","not a supported format "+n);if(n==="CRF")throw new C("rasterfactory:open",`cannot open raster: ${r}`);const d=new(L.get(n)).constructor(l);return await d.open({signal:e.signal}),d}const o=Array.from(L.keys()).filter(d=>d!=="CovJSON"&&d!=="Memory");let c=0;const u=()=>{if(n=o[c++],!n||n==="CRF")return null;const d=new(L.get(n)).constructor(l);return d.open({signal:e.signal}).then(()=>d).catch(()=>u())};return u()}static register(e,r,t){L.has(e.toUpperCase())||L.set(e.toUpperCase(),{desc:r,constructor:t})}}let D=class extends Bt(Et(Jt(At(ui(Yt(ts(Ui(Xt(Lt(Ht(zt(Vt)))))))))))){constructor(...i){super(...i),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=Wt(async(e,r,t)=>{const{save:s,saveAs:a}=await ct(()=>import("./imageryUtils-DyY8Iocn.js"),__vite__mapDeps([6,7,1,2,8,9,10,11]));switch(e){case ye.SAVE:return s(this,r);case ye.SAVE_AS:return a(this,t,r)}})}normalizeCtorArgs(i,e){return typeof i=="string"?{url:i,...e}:i}load(i){const e=i!=null?i.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},i).catch(Gt).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const i=[new ce({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new ce({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],e=this.raster?.rasterInfo??this.serviceRasterInfo,r=e?.attributeTable,t=r!=null?r.fields:null,s="Raster.";if(t){const l=t.filter(o=>o.type!=="oid"&&o.name.toLowerCase()!=="value").map(o=>{const c=o.clone();return c.name=s+o.name,c});i.push(...l)}const a=e?.dataType,n=e?.multidimensionalInfo;if((a==="vector-magdir"||a==="vector-uv")&&n!=null){const l=n.variables[0].unit?.trim(),o="Magnitude"+(l?` (${l})`:"");i.push(new ce({name:"Raster.Magnitude",alias:o,domain:null,editable:!1,type:"double"})),i.push(new ce({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return i}createPopupTemplate(i){const{rasterFields:e}=this,r=i?.visibleFieldNames??new Set(e.map(({name:a})=>a).filter(a=>a.toLowerCase()!=="raster.servicepixelvalue.raw")),t=Vi({fields:e,title:this.title},{...i,visibleFieldNames:r}),{rasterInfo:s}=this.raster;return t?.fieldInfos&&s?.pixelType.startsWith("f")&&t.fieldInfos.forEach(({format:a,fieldName:n})=>{a&&n&&/^raster\.(item|service)pixelvalue/i.test(n)&&(a.places=2)}),t}async generateRasterInfo(i,e){if(i=Je($e,i),await this.load(),!i||i.functionName?.toLowerCase()==="none")return this.serviceRasterInfo;try{const{rasterInfo:r}=await this._openFunctionRaster(i,e);return r}catch(r){throw r instanceof C?r:new C("imagery-tile-layer","the given raster function is not supported")}}async save(i){return this._debouncedSaveOperations(ye.SAVE,i)}async saveAs(i,e){return this._debouncedSaveOperations(ye.SAVE_AS,e,i)}write(i,e){const r=this._primaryRasters[0]??this.raster;if(this.loaded?r.datasetFormat==="RasterTileServer"&&(r.tileType==="Raster"||r.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(i,e);if(e?.messages){const t=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new C("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${t}'`,{layer:this}))}return null}async _openRaster(i){let e=!1;if(this.raster)await this._openFromRaster(this.raster,i),e=this.raster.datasetFormat==="Function",!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:t,rasterFunction:s,source:a}=this;if(!t&&!a)throw new C("imagery-tile-layer:open","missing url or source parameter");a?await this._openFromSource(a,i):s?await this._openFromUrlWithRasterFunction(t,s,i):await this._openFromUrl(t,i)}const r=this.raster.rasterInfo;if(!r)throw new C("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?r:this._primaryRasters[0].rasterInfo),this._set("spatialReference",r.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const t=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(t,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(jt(()=>this.customParameters,t=>{this.raster&&(this.raster.ioConfig.customFetchParameters=t)}))}async _openFromRaster(i,e){i.rasterInfo||await i.open({signal:e}),this._primaryRasters=i.datasetFormat==="Function"?i.primaryRasters.rasters:[i],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(i,e,r){const t=[i];e&&ji(e.toJSON(),t);const s=await Promise.all(t.map(n=>Pe.open({url:n,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:r}))),a=s.findIndex(n=>n==null);if(a>-1)throw new C("imagery-tile-layer:open",`cannot open raster: ${t[a]}`);return this._primaryRasters=s,this._initializeWithFunctionRaster(e)}async _openFromUrl(i,e){const r=await Pe.open({url:i,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(r==null)throw new C("imagery-tile-layer:open",`cannot open raster: ${i}`);this._primaryRasters=[r],this.raster=r}async _openFromSource(i,e){const r="the tiled imagery data source is not supported",t=i.type?.toLowerCase()==="coverage"?"CovJSON":i.extent&&i.pixelBlock?"MEMORY":null;if(!t)throw new C("imagery-tile-layer:open",r);t==="MEMORY"&&(i={...i,pixelBlock:void 0,pixelBlocks:[i.pixelBlock]});const s=await Pe.open({url:"",source:i,datasetFormat:t,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(s==null)throw new C("imagery-tile-layer:open",r);this._primaryRasters=[s],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=s}async _openFunctionRaster(i,e){const r={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(a=>r[a.url]=a);const t=mt(i.functionDefinition?.toJSON()??i.toJSON(),r),s=new pt({rasterFunction:t});return await s.open(e),s}async _initializeWithFunctionRaster(i,e){try{this.raster=await this._openFunctionRaster(i,e)}catch(r){r instanceof C&&ne.getLogger(this).error("imagery-tile-layer:open",r.message),ne.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};w([b({clonable:!1})],D.prototype,"_primaryRasters",void 0),w([b(Ut)],D.prototype,"legendEnabled",void 0),w([b({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],D.prototype,"isReference",void 0),w([b({type:["show","hide"]})],D.prototype,"listMode",void 0),w([b({json:{read:!0,write:!0}})],D.prototype,"blendMode",void 0),w([b()],D.prototype,"sourceJSON",void 0),w([b({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],D.prototype,"version",void 0),w([b({readOnly:!0,json:{read:!1}})],D.prototype,"type",void 0),w([b({type:["ArcGISTiledImageServiceLayer"]})],D.prototype,"operationalLayerType",void 0),w([b({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(i,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(i,e,r){e[r]=!i}}}})],D.prototype,"popupEnabled",void 0),w([b({type:qt,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],D.prototype,"popupTemplate",void 0),w([b({readOnly:!0})],D.prototype,"defaultPopupTemplate",null),w([b({readOnly:!0,type:[ce]})],D.prototype,"fields",void 0),w([b({readOnly:!0,type:[ce]})],D.prototype,"rasterFields",null),w([b({constructOnly:!0})],D.prototype,"source",void 0),D=w([Y("esri.layers.ImageryTileLayer")],D);const ar=D;export{ar as default};
