import{dT as S,dX as I,dV as w,dW as $,dY as O,dU as T,bg as P,ed as f,c0 as u,em as E,en as L,aQ as g,bk as F,bH as M,eo as R,s as b,o as U,v as s,w as a,ep as v,bI as _,bO as j,d$ as q,x as J,eq as N,e2 as A}from"./index-IeegpAPg.js";import{i as V}from"./scaleUtils-2G4b0GtR.js";import{i as k}from"./APIKeyMixin-Bid8LsFN.js";import{m as z,f as H,t as W}from"./SublayersOwner-CUNVedDc.js";import{l as Z}from"./ArcGISService-CIVcan3f.js";import{e as B}from"./CustomParametersMixin-seLw3Ail.js";import{l as C}from"./TemporalLayer-X1Uvg484.js";import{y as D}from"./ExportImageParameters-DaVX2JpN.js";import{e as x}from"./sublayerUtils-DaN0oCzI.js";import{t as G}from"./versionUtils-DrRIr99F.js";import"./UniqueValueRenderer-BRA4hJF2.js";import"./ColorStop-DcLcp94M.js";import"./diffUtils-BsmLiWuX.js";import"./colorRamps-DtdPWJTS.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-BxjHbii2.js";import"./jsonUtils-Y19K1K5D.js";import"./defaults-Ca7Ezrxv.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-72oPtPHD.js";import"./jsonUtils-CKn8N5rB.js";import"./LRUCache-B9Ch9jyy.js";import"./FieldsIndex-1XykZMxf.js";import"./UnknownTimeZone-Bp45PPyc.js";import"./OverrideHelper-Beyhf6nl.js";import"./colorUtils-D0_txqzP.js";import"./vec42-DVf6basU.js";import"./vec4f64-CMoMXWBi.js";import"./utils-DyJ7tXUW.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-D5PvWHeA.js";import"./heatmapUtils-gC4I9bES.js";import"./QueryTask-hqxfY5DR.js";import"./infoFor3D-_5f2f6Um.js";import"./executeForIds-CAUWV_EY.js";import"./query-CucHdm2a.js";import"./pbfQueryUtils-BQwCMRdG.js";import"./pbf-DkH7zH7h.js";import"./OptimizedFeature-CIptWNVu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-BviGmGlG.js";import"./executeQueryJSON-DyLR9T8O.js";import"./FeatureSet--t3TP_gY.js";import"./featureConversionUtils-6nDzGVaS.js";import"./featureLayerUtils-DOfcdp_A.js";import"./FeatureType-CupKmq3w.js";import"./FeatureTemplate-CHC4o9Rs.js";import"./labelingInfo-COg3pKpK.js";import"./labelUtils-cNe8bNWP.js";import"./LayerFloorInfo-BnKc7C4W.js";import"./Relationship-C6f1Hi7_.js";import"./serviceCapabilitiesUtils-COVZGAXJ.js";import"./popupUtils-BWB8Dp2p.js";import"./TimeInfo-BokYbqlu.js";import"./floorFilterUtils-DKzVzLpH.js";let t=class extends S(C(I(z(H(Z(w($(O(T(k(B(A)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new D({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(P).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const m=r.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,m,o){if(!this.loaded||!e)return;const n=e.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let p=!1;const l=f(o.origin);if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===u.PORTAL_ITEM){const i=this.createSublayersForOrigin("service").sublayers;p=x(n,i,u.SERVICE)}else if(l>u.PORTAL_ITEM){const i=this.createSublayersForOrigin("portal-item");p=x(n,i.sublayers,f(i.origin))}}const h=[],c={writeSublayerStructure:p,...o};let d=p||this.hasVisibleLayersForOrigin(l);n.forEach(i=>{const y=i.write({},c);h.push(y),d=d||i.originOf("visible")==="user"}),h.some(i=>Object.keys(i).length>1)&&(r.layers=h),d&&(r.visibleLayers=n.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(e,r,m,o){const n=o?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=o?.floors??null,this._exportImageParameters.scale=V({extent:e,width:r})*n;const p=this._exportImageParameters.toJSON(),l=!o?.rotation||this.version<10.3?{}:{rotation:-o.rotation},h=e?.spatialReference,c=E(h);p.dpi*=n;const d={};if(o?.timeExtent){const{start:i,end:y}=o.timeExtent.toJSON();d.time=i&&y&&i===y?""+i:`${i??"null"},${y??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:c,imageSR:c,size:r+","+m,...p,...l,...d}}async fetchImage(e,r,m,o){const{data:n}=await this._fetchImage("image",e,r,m,o);return n}async fetchImageBitmap(e,r,m,o){const{data:n,url:p}=await this._fetchImage("blob",e,r,m,o);return L(n,p,o?.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await g(this.url,r),{extent:o,fullExtent:n,timeExtent:p}=m,l=o||n;return{fullExtent:l&&F.fromJSON(l),timeExtent:p&&M.fromJSON({start:p[0],end:p[1]})}}loadAll(){return R(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return G(this,e)}async _fetchImage(e,r,m,o,n){const p={responseType:e,signal:n?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,m,o,n),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(p.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:h}=await g(l,p);return{data:h,url:l}}catch(h){throw U(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:m}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};s([a(v("dateFieldsTimeReference"))],t.prototype,"dateFieldsTimeZone",void 0),s([a({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),s([a()],t.prototype,"dpi",void 0),s([a()],t.prototype,"gdbVersion",void 0),s([a()],t.prototype,"imageFormat",void 0),s([_("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),s([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),s([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),s([a()],t.prototype,"imageTransparency",void 0),s([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),s([a({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),s([a({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),s([a({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),s([a(v("preferredTimeReference"))],t.prototype,"preferredTimeZone",void 0),s([a()],t.prototype,"sourceJSON",void 0),s([a({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),s([j("sublayers",{layers:{type:[W]},visibleLayers:{type:[N]}})],t.prototype,"writeSublayers",null),s([a({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),s([a({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),s([a(q)],t.prototype,"url",void 0),t=s([J("esri.layers.MapImageLayer")],t);const Qe=t;export{Qe as default};
